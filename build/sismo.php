<?php 
/*Copyright (c) 2009,2010,2011 Fabien Potencier

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

 namespace Symfony\Component\ClassLoader { class UniversalClassLoader { private $namespaces = array(); private $prefixes = array(); private $namespaceFallback = array(); private $prefixFallback = array(); public function getNamespaces() { return $this->namespaces; } public function getPrefixes() { return $this->prefixes; } public function getNamespaceFallback() { return $this->namespaceFallback; } public function getPrefixFallback() { return $this->prefixFallback; } public function registerNamespaceFallback($dirs) { $this->namespaceFallback = (array) $dirs; } public function registerPrefixFallback($dirs) { $this->prefixFallback = (array) $dirs; } public function registerNamespaces(array $namespaces) { foreach ($namespaces as $namespace => $locations) { $this->namespaces[$namespace] = (array) $locations; } } public function registerNamespace($namespace, $paths) { $this->namespaces[$namespace] = (array) $paths; } public function registerPrefixes(array $classes) { foreach ($classes as $prefix => $locations) { $this->prefixes[$prefix] = (array) $locations; } } public function registerPrefix($prefix, $paths) { $this->prefixes[$prefix] = (array) $paths; } public function register($prepend = false) { spl_autoload_register(array($this, 'loadClass'), true, $prepend); } public function loadClass($class) { if ($file = $this->findFile($class)) { require $file; } } public function findFile($class) { if ('\\' == $class[0]) { $class = substr($class, 1); } if (false !== $pos = strrpos($class, '\\')) { $namespace = substr($class, 0, $pos); foreach ($this->namespaces as $ns => $dirs) { foreach ($dirs as $dir) { if (0 === strpos($namespace, $ns)) { $className = substr($class, $pos + 1); $file = $dir.DIRECTORY_SEPARATOR.str_replace('\\', DIRECTORY_SEPARATOR, $namespace).DIRECTORY_SEPARATOR.str_replace('_', DIRECTORY_SEPARATOR, $className).'.php'; if (file_exists($file)) { return $file; } } } } foreach ($this->namespaceFallback as $dir) { $file = $dir.DIRECTORY_SEPARATOR.str_replace('\\', DIRECTORY_SEPARATOR, $class).'.php'; if (file_exists($file)) { return $file; } } } else { foreach ($this->prefixes as $prefix => $dirs) { foreach ($dirs as $dir) { if (0 === strpos($class, $prefix)) { $file = $dir.DIRECTORY_SEPARATOR.str_replace('_', DIRECTORY_SEPARATOR, $class).'.php'; if (file_exists($file)) { return $file; } } } } foreach ($this->prefixFallback as $dir) { $file = $dir.DIRECTORY_SEPARATOR.str_replace('_', DIRECTORY_SEPARATOR, $class).'.php'; if (file_exists($file)) { return $file; } } } } } } namespace Symfony\Component\HttpKernel { use Symfony\Component\HttpFoundation\Request; interface HttpKernelInterface { const MASTER_REQUEST = 1; const SUB_REQUEST = 2; function handle(Request $request, $type = self::MASTER_REQUEST, $catch = true); } } namespace Symfony\Component\EventDispatcher { interface EventSubscriberInterface { static function getSubscribedEvents(); } } namespace Silex { interface ExtensionInterface { function register(Application $app); } } namespace Symfony\Component\EventDispatcher { interface EventDispatcherInterface { function dispatch($eventName, Event $event = null); function addListener($eventNames, $listener, $priority = 0); function addSubscriber(EventSubscriberInterface $subscriber, $priority = 0); function removeListener($eventNames, $listener); function removeSubscriber(EventSubscriberInterface $subscriber); function getListeners($eventName = null); function hasListeners($eventName = null); } } namespace Symfony\Component\HttpKernel\Controller { use Symfony\Component\HttpFoundation\Request; interface ControllerResolverInterface { function getController(Request $request); function getArguments(Request $request, $controller); } } namespace Symfony\Component\Routing\Matcher { interface UrlMatcherInterface { function match($pathinfo); } } namespace Symfony\Component\Routing { interface RouteCompilerInterface { function compile(Route $route); } } namespace { interface Twig_LoaderInterface { function getSource($name); function getCacheKey($name); function isFresh($name, $time); } } namespace { interface Twig_ExtensionInterface { function initRuntime(Twig_Environment $environment); function getTokenParsers(); function getNodeVisitors(); function getFilters(); function getTests(); function getFunctions(); function getOperators(); function getGlobals(); function getName(); } } namespace Symfony\Component\Routing\Generator { interface UrlGeneratorInterface { function generate($name, array $parameters = array(), $absolute = false); } } namespace { interface Twig_TemplateInterface { const ANY_CALL = 'any'; const ARRAY_CALL = 'array'; const METHOD_CALL = 'method'; function render(array $context); function display(array $context); function getEnvironment(); } } namespace Symfony\Component\Console\Helper { interface HelperInterface { function setHelperSet(HelperSet $helperSet = null); function getHelperSet(); function getName(); } } namespace Symfony\Component\Console\Input { interface InputInterface { function getFirstArgument(); function hasParameterOption($values); function getParameterOption($values, $default = false); function bind(InputDefinition $definition); function validate(); function getArguments(); function getArgument($name); function getOptions(); function getOption($name); function isInteractive(); } } namespace Symfony\Component\Console\Output { use Symfony\Component\Console\Formatter\OutputFormatterInterface; interface OutputInterface { const VERBOSITY_QUIET = 0; const VERBOSITY_NORMAL = 1; const VERBOSITY_VERBOSE = 2; const OUTPUT_NORMAL = 0; const OUTPUT_RAW = 1; const OUTPUT_PLAIN = 2; function write($messages, $newline = false, $type = 0); function writeln($messages, $type = 0); function setVerbosity($level); function getVerbosity(); function setDecorated($decorated); function isDecorated(); function setFormatter(OutputFormatterInterface $formatter); function getFormatter(); } } namespace Symfony\Component\Console\Formatter { interface OutputFormatterInterface { function setDecorated($decorated); function isDecorated(); function setStyle($name, OutputFormatterStyleInterface $style); function hasStyle($name); function getStyle($name); function format($message); } } namespace Symfony\Component\Console\Formatter { interface OutputFormatterStyleInterface { function setForeground($color = null); function setBackground($color = null); function setOption($option); function unsetOption($option); function setOptions(array $options); function getBeginStyle(); function getEndStyle(); } } namespace Symfony\Component\Console { use Symfony\Component\Console\Input\InputInterface; use Symfony\Component\Console\Input\ArgvInput; use Symfony\Component\Console\Input\ArrayInput; use Symfony\Component\Console\Input\InputDefinition; use Symfony\Component\Console\Input\InputOption; use Symfony\Component\Console\Input\InputArgument; use Symfony\Component\Console\Output\OutputInterface; use Symfony\Component\Console\Output\Output; use Symfony\Component\Console\Output\ConsoleOutput; use Symfony\Component\Console\Command\Command; use Symfony\Component\Console\Command\HelpCommand; use Symfony\Component\Console\Command\ListCommand; use Symfony\Component\Console\Helper\HelperSet; use Symfony\Component\Console\Helper\FormatterHelper; use Symfony\Component\Console\Helper\DialogHelper; class Application { private $commands; private $aliases; private $wantHelps = false; private $runningCommand; private $name; private $version; private $catchExceptions; private $autoExit; private $definition; private $helperSet; public function __construct($name = 'UNKNOWN', $version = 'UNKNOWN') { $this->name = $name; $this->version = $version; $this->catchExceptions = true; $this->autoExit = true; $this->commands = array(); $this->aliases = array(); $this->helperSet = new HelperSet(array( new FormatterHelper(), new DialogHelper(), )); $this->add(new HelpCommand()); $this->add(new ListCommand()); $this->definition = new InputDefinition(array( new InputArgument('command', InputArgument::REQUIRED, 'The command to execute'), new InputOption('--help', '-h', InputOption::VALUE_NONE, 'Display this help message.'), new InputOption('--quiet', '-q', InputOption::VALUE_NONE, 'Do not output any message.'), new InputOption('--verbose', '-v', InputOption::VALUE_NONE, 'Increase verbosity of messages.'), new InputOption('--version', '-V', InputOption::VALUE_NONE, 'Display this program version.'), new InputOption('--ansi', '-a', InputOption::VALUE_NONE, 'Force ANSI output.'), new InputOption('--no-interaction', '-n', InputOption::VALUE_NONE, 'Do not ask any interactive question.'), )); } public function run(InputInterface $input = null, OutputInterface $output = null) { if (null === $input) { $input = new ArgvInput(); } if (null === $output) { $output = new ConsoleOutput(); } try { $statusCode = $this->doRun($input, $output); } catch (\Exception $e) { if (!$this->catchExceptions) { throw $e; } $this->renderException($e, $output); $statusCode = $e->getCode(); $statusCode = is_numeric($statusCode) && $statusCode ? $statusCode : 1; } if ($this->autoExit) { if ($statusCode > 255) { $statusCode = 255; } exit($statusCode); } return $statusCode; } public function doRun(InputInterface $input, OutputInterface $output) { $name = $this->getCommandName($input); if (true === $input->hasParameterOption(array('--ansi', '-a'))) { $output->setDecorated(true); } if (true === $input->hasParameterOption(array('--help', '-h'))) { if (!$name) { $name = 'help'; $input = new ArrayInput(array('command' => 'help')); } else { $this->wantHelps = true; } } if (true === $input->hasParameterOption(array('--no-interaction', '-n'))) { $input->setInteractive(false); } if (true === $input->hasParameterOption(array('--quiet', '-q'))) { $output->setVerbosity(OutputInterface::VERBOSITY_QUIET); } elseif (true === $input->hasParameterOption(array('--verbose', '-v'))) { $output->setVerbosity(OutputInterface::VERBOSITY_VERBOSE); } if (true === $input->hasParameterOption(array('--version', '-V'))) { $output->writeln($this->getLongVersion()); return 0; } if (!$name) { $name = 'list'; $input = new ArrayInput(array('command' => 'list')); } $command = $this->find($name); $this->runningCommand = $command; $statusCode = $command->run($input, $output); $this->runningCommand = null; return is_numeric($statusCode) ? $statusCode : 0; } public function setHelperSet(HelperSet $helperSet) { $this->helperSet = $helperSet; } public function getHelperSet() { return $this->helperSet; } public function getDefinition() { return $this->definition; } public function getHelp() { $messages = array( $this->getLongVersion(), '', '<comment>Usage:</comment>', sprintf("  [options] command [arguments]\n"), '<comment>Options:</comment>', ); foreach ($this->getDefinition()->getOptions() as $option) { $messages[] = sprintf('  %-29s %s %s', '<info>--'.$option->getName().'</info>', $option->getShortcut() ? '<info>-'.$option->getShortcut().'</info>' : '  ', $option->getDescription() ); } return implode("\n", $messages); } public function setCatchExceptions($boolean) { $this->catchExceptions = (Boolean) $boolean; } public function setAutoExit($boolean) { $this->autoExit = (Boolean) $boolean; } public function getName() { return $this->name; } public function setName($name) { $this->name = $name; } public function getVersion() { return $this->version; } public function setVersion($version) { $this->version = $version; } public function getLongVersion() { if ('UNKNOWN' !== $this->getName() && 'UNKNOWN' !== $this->getVersion()) { return sprintf('<info>%s</info> version <comment>%s</comment>', $this->getName(), $this->getVersion()); } return '<info>Console Tool</info>'; } public function register($name) { return $this->add(new Command($name)); } public function addCommands(array $commands) { foreach ($commands as $command) { $this->add($command); } } public function add(Command $command) { $command->setApplication($this); $this->commands[$command->getFullName()] = $command; foreach ($command->getAliases() as $alias) { $this->aliases[$alias] = $command; } return $command; } public function get($name) { if (!isset($this->commands[$name]) && !isset($this->aliases[$name])) { throw new \InvalidArgumentException(sprintf('The command "%s" does not exist.', $name)); } $command = isset($this->commands[$name]) ? $this->commands[$name] : $this->aliases[$name]; if ($this->wantHelps) { $this->wantHelps = false; $helpCommand = $this->get('help'); $helpCommand->setCommand($command); return $helpCommand; } return $command; } public function has($name) { return isset($this->commands[$name]) || isset($this->aliases[$name]); } public function getNamespaces() { $namespaces = array(); foreach ($this->commands as $command) { if ($command->getNamespace()) { $namespaces[$command->getNamespace()] = true; } } return array_keys($namespaces); } public function findNamespace($namespace) { $abbrevs = static::getAbbreviations($this->getNamespaces()); if (!isset($abbrevs[$namespace])) { throw new \InvalidArgumentException(sprintf('There are no commands defined in the "%s" namespace.', $namespace)); } if (count($abbrevs[$namespace]) > 1) { throw new \InvalidArgumentException(sprintf('The namespace "%s" is ambiguous (%s).', $namespace, $this->getAbbreviationSuggestions($abbrevs[$namespace]))); } return $abbrevs[$namespace][0]; } public function find($name) { $namespace = ''; if (false !== $pos = strrpos($name, ':')) { $namespace = $this->findNamespace(substr($name, 0, $pos)); $name = substr($name, $pos + 1); } $fullName = $namespace ? $namespace.':'.$name : $name; $commands = array(); foreach ($this->commands as $command) { if ($command->getNamespace() == $namespace) { $commands[] = $command->getName(); } } $abbrevs = static::getAbbreviations($commands); if (isset($abbrevs[$name]) && 1 == count($abbrevs[$name])) { return $this->get($namespace ? $namespace.':'.$abbrevs[$name][0] : $abbrevs[$name][0]); } if (isset($abbrevs[$name]) && count($abbrevs[$name]) > 1) { $suggestions = $this->getAbbreviationSuggestions(array_map(function ($command) use ($namespace) { return $namespace.':'.$command; }, $abbrevs[$name])); throw new \InvalidArgumentException(sprintf('Command "%s" is ambiguous (%s).', $fullName, $suggestions)); } $abbrevs = static::getAbbreviations(array_keys($this->aliases)); if (!isset($abbrevs[$fullName])) { throw new \InvalidArgumentException(sprintf('Command "%s" is not defined.', $fullName)); } if (count($abbrevs[$fullName]) > 1) { throw new \InvalidArgumentException(sprintf('Command "%s" is ambiguous (%s).', $fullName, $this->getAbbreviationSuggestions($abbrevs[$fullName]))); } return $this->get($abbrevs[$fullName][0]); } public function all($namespace = null) { if (null === $namespace) { return $this->commands; } $commands = array(); foreach ($this->commands as $name => $command) { if ($namespace === $command->getNamespace()) { $commands[$name] = $command; } } return $commands; } static public function getAbbreviations($names) { $abbrevs = array(); foreach ($names as $name) { for ($len = strlen($name) - 1; $len > 0; --$len) { $abbrev = substr($name, 0, $len); if (!isset($abbrevs[$abbrev])) { $abbrevs[$abbrev] = array($name); } else { $abbrevs[$abbrev][] = $name; } } } foreach ($names as $name) { $abbrevs[$name] = array($name); } return $abbrevs; } public function asText($namespace = null) { $commands = $namespace ? $this->all($this->findNamespace($namespace)) : $this->commands; $messages = array($this->getHelp(), ''); if ($namespace) { $messages[] = sprintf("<comment>Available commands for the \"%s\" namespace:</comment>", $namespace); } else { $messages[] = '<comment>Available commands:</comment>'; } $width = 0; foreach ($commands as $command) { $width = strlen($command->getName()) > $width ? strlen($command->getName()) : $width; } $width += 2; foreach ($this->sortCommands($commands) as $space => $commands) { if (!$namespace && '_global' !== $space) { $messages[] = '<comment>'.$space.'</comment>'; } foreach ($commands as $command) { $aliases = $command->getAliases() ? '<comment> ('.implode(', ', $command->getAliases()).')</comment>' : ''; $messages[] = sprintf("  <info>%-${width}s</info> %s%s", ($command->getNamespace() ? ':' : '').$command->getName(), $command->getDescription(), $aliases); } } return implode("\n", $messages); } public function asXml($namespace = null, $asDom = false) { $commands = $namespace ? $this->all($this->findNamespace($namespace)) : $this->commands; $dom = new \DOMDocument('1.0', 'UTF-8'); $dom->formatOutput = true; $dom->appendChild($xml = $dom->createElement('symfony')); $xml->appendChild($commandsXML = $dom->createElement('commands')); if ($namespace) { $commandsXML->setAttribute('namespace', $namespace); } else { $namespacesXML = $dom->createElement('namespaces'); $xml->appendChild($namespacesXML); } foreach ($this->sortCommands($commands) as $space => $commands) { if (!$namespace) { $namespaceArrayXML = $dom->createElement('namespace'); $namespacesXML->appendChild($namespaceArrayXML); $namespaceArrayXML->setAttribute('id', $space); } foreach ($commands as $command) { if (!$namespace) { $commandXML = $dom->createElement('command'); $namespaceArrayXML->appendChild($commandXML); $commandXML->appendChild($dom->createTextNode($command->getName())); } $node = $command->asXml(true)->getElementsByTagName('command')->item(0); $node = $dom->importNode($node, true); $commandsXML->appendChild($node); } } return $asDom ? $dom : $dom->saveXml(); } public function renderException($e, $output) { $strlen = function ($string) { return function_exists('mb_strlen') ? mb_strlen($string) : strlen($string); }; do { $title = sprintf('  [%s]  ', get_class($e)); $len = $strlen($title); $lines = array(); foreach (explode("\n", $e->getMessage()) as $line) { $lines[] = sprintf('  %s  ', $line); $len = max($strlen($line) + 4, $len); } $messages = array(str_repeat(' ', $len), $title.str_repeat(' ', $len - $strlen($title))); foreach ($lines as $line) { $messages[] = $line.str_repeat(' ', $len - $strlen($line)); } $messages[] = str_repeat(' ', $len); $output->writeln("\n"); foreach ($messages as $message) { $output->writeln('<error>'.$message.'</error>'); } $output->writeln("\n"); if (OutputInterface::VERBOSITY_VERBOSE === $output->getVerbosity()) { $output->writeln('</comment>Exception trace:</comment>'); $trace = $e->getTrace(); array_unshift($trace, array( 'function' => '', 'file' => $e->getFile() != null ? $e->getFile() : 'n/a', 'line' => $e->getLine() != null ? $e->getLine() : 'n/a', 'args' => array(), )); for ($i = 0, $count = count($trace); $i < $count; $i++) { $class = isset($trace[$i]['class']) ? $trace[$i]['class'] : ''; $type = isset($trace[$i]['type']) ? $trace[$i]['type'] : ''; $function = $trace[$i]['function']; $file = isset($trace[$i]['file']) ? $trace[$i]['file'] : 'n/a'; $line = isset($trace[$i]['line']) ? $trace[$i]['line'] : 'n/a'; $output->writeln(sprintf(' %s%s%s() at <info>%s:%s</info>', $class, $type, $function, $file, $line)); } $output->writeln("\n"); } } while ($e = $e->getPrevious()); if (null !== $this->runningCommand) { $output->writeln(sprintf('<info>%s</info>', sprintf($this->runningCommand->getSynopsis(), $this->getName()))); $output->writeln("\n"); } } protected function getCommandName(InputInterface $input) { return $input->getFirstArgument('command'); } private function sortCommands($commands) { $namespacedCommands = array(); foreach ($commands as $name => $command) { $key = $command->getNamespace() ? $command->getNamespace() : '_global'; if (!isset($namespacedCommands[$key])) { $namespacedCommands[$key] = array(); } $namespacedCommands[$key][$name] = $command; } ksort($namespacedCommands); foreach ($namespacedCommands as &$commands) { ksort($commands); } return $namespacedCommands; } private function getAbbreviationSuggestions($abbrevs) { return sprintf('%s, %s%s', $abbrevs[0], $abbrevs[1], count($abbrevs) > 2 ? sprintf(' and %d more', count($abbrevs) - 2) : ''); } } } namespace Symfony\Component\Console\Helper { use Symfony\Component\Console\Command\Command; class HelperSet { private $helpers; private $command; public function __construct(array $helpers = array()) { $this->helpers = array(); foreach ($helpers as $alias => $helper) { $this->set($helper, is_int($alias) ? null : $alias); } } public function set(HelperInterface $helper, $alias = null) { $this->helpers[$helper->getName()] = $helper; if (null !== $alias) { $this->helpers[$alias] = $helper; } $helper->setHelperSet($this); } public function has($name) { return isset($this->helpers[$name]); } public function get($name) { if (!$this->has($name)) { throw new \InvalidArgumentException(sprintf('The helper "%s" is not defined.', $name)); } return $this->helpers[$name]; } public function setCommand(Command $command = null) { $this->command = $command; } public function getCommand() { return $this->command; } } } namespace Symfony\Component\Console\Helper { abstract class Helper implements HelperInterface { protected $helperSet = null; public function setHelperSet(HelperSet $helperSet = null) { $this->helperSet = $helperSet; } public function getHelperSet() { return $this->helperSet; } } } namespace Symfony\Component\Console\Helper { class FormatterHelper extends Helper { public function formatSection($section, $message, $style = 'info') { return sprintf('<%s>[%s]</%s> %s', $style, $section, $style, $message); } public function formatBlock($messages, $style, $large = false) { if (!is_array($messages)) { $messages = array($messages); } $len = 0; $lines = array(); foreach ($messages as $message) { $lines[] = sprintf($large ? '  %s  ' : ' %s ', $message); $len = max($this->strlen($message) + ($large ? 4 : 2), $len); } $messages = $large ? array(str_repeat(' ', $len)) : array(); foreach ($lines as $line) { $messages[] = $line.str_repeat(' ', $len - $this->strlen($line)); } if ($large) { $messages[] = str_repeat(' ', $len); } foreach ($messages as &$message) { $message = sprintf('<%s>%s</%s>', $style, $message, $style); } return implode("\n", $messages); } private function strlen($string) { return function_exists('mb_strlen') ? mb_strlen($string) : strlen($string); } public function getName() { return 'formatter'; } } } namespace Symfony\Component\Console\Helper { use Symfony\Component\Console\Output\OutputInterface; class DialogHelper extends Helper { public function ask(OutputInterface $output, $question, $default = null) { $output->writeln($question); $ret = trim(fgets(STDIN)); return $ret ? $ret : $default; } public function askConfirmation(OutputInterface $output, $question, $default = true) { $answer = 'z'; while ($answer && !in_array(strtolower($answer[0]), array('y', 'n'))) { $answer = $this->ask($output, $question); } if (false === $default) { return $answer && 'y' == strtolower($answer[0]); } return !$answer || 'y' == strtolower($answer[0]); } public function askAndValidate(OutputInterface $output, $question, \Closure $validator, $attempts = false) { $error = null; while (false === $attempts || $attempts--) { if (null !== $error) { $output->writeln($this->getHelperSet()->get('formatter')->formatBlock($error->getMessage(), 'error')); } $value = $this->ask($output, $question, null); try { return $validator($value); } catch (\Exception $error) { } } throw $error; } public function getName() { return 'dialog'; } } } namespace Symfony\Component\Console\Command { use Symfony\Component\Console\Input\InputDefinition; use Symfony\Component\Console\Input\InputOption; use Symfony\Component\Console\Input\InputArgument; use Symfony\Component\Console\Input\InputInterface; use Symfony\Component\Console\Output\OutputInterface; use Symfony\Component\Console\Application; class Command { private $application; private $name; private $namespace; private $aliases; private $definition; private $help; private $description; private $ignoreValidationErrors; private $applicationDefinitionMerged; private $code; private $synopsis; public function __construct($name = null) { $this->definition = new InputDefinition(); $this->ignoreValidationErrors = false; $this->applicationDefinitionMerged = false; $this->aliases = array(); if (null !== $name) { $this->setName($name); } $this->configure(); if (!$this->name) { throw new \LogicException('The command name cannot be empty.'); } } public function setApplication(Application $application = null) { $this->application = $application; } public function getApplication() { return $this->application; } protected function configure() { } protected function execute(InputInterface $input, OutputInterface $output) { throw new \LogicException('You must override the execute() method in the concrete command class.'); } protected function interact(InputInterface $input, OutputInterface $output) { } protected function initialize(InputInterface $input, OutputInterface $output) { } public function run(InputInterface $input, OutputInterface $output) { $this->getSynopsis(); $this->mergeApplicationDefinition(); try { $input->bind($this->definition); } catch (\Exception $e) { if (!$this->ignoreValidationErrors) { throw $e; } } $this->initialize($input, $output); if ($input->isInteractive()) { $this->interact($input, $output); } $input->validate(); if ($this->code) { return call_user_func($this->code, $input, $output); } return $this->execute($input, $output); } public function setCode(\Closure $code) { $this->code = $code; return $this; } private function mergeApplicationDefinition() { if (null === $this->application || true === $this->applicationDefinitionMerged) { return; } $this->definition->setArguments(array_merge( $this->application->getDefinition()->getArguments(), $this->definition->getArguments() )); $this->definition->addOptions($this->application->getDefinition()->getOptions()); $this->applicationDefinitionMerged = true; } public function setDefinition($definition) { if ($definition instanceof InputDefinition) { $this->definition = $definition; } else { $this->definition->setDefinition($definition); } $this->applicationDefinitionMerged = false; return $this; } public function getDefinition() { return $this->definition; } public function addArgument($name, $mode = null, $description = '', $default = null) { $this->definition->addArgument(new InputArgument($name, $mode, $description, $default)); return $this; } public function addOption($name, $shortcut = null, $mode = null, $description = '', $default = null) { $this->definition->addOption(new InputOption($name, $shortcut, $mode, $description, $default)); return $this; } public function setName($name) { if (false !== $pos = strrpos($name, ':')) { $namespace = substr($name, 0, $pos); $name = substr($name, $pos + 1); } else { $namespace = $this->namespace; } if (!$name) { throw new \InvalidArgumentException('A command name cannot be empty.'); } $this->namespace = $namespace; $this->name = $name; return $this; } public function getNamespace() { return $this->namespace; } public function getName() { return $this->name; } public function getFullName() { return $this->getNamespace() ? $this->getNamespace().':'.$this->getName() : $this->getName(); } public function setDescription($description) { $this->description = $description; return $this; } public function getDescription() { return $this->description; } public function setHelp($help) { $this->help = $help; return $this; } public function getHelp() { return $this->help; } public function getProcessedHelp() { $name = $this->namespace.':'.$this->name; $placeholders = array( '%command.name%', '%command.full_name%' ); $replacements = array( $name, $_SERVER['PHP_SELF'].' '.$name ); return str_replace($placeholders, $replacements, $this->getHelp()); } public function setAliases($aliases) { $this->aliases = $aliases; return $this; } public function getAliases() { return $this->aliases; } public function getSynopsis() { if (null === $this->synopsis) { $this->synopsis = trim(sprintf('%s %s', $this->getFullName(), $this->definition->getSynopsis())); } return $this->synopsis; } public function getHelper($name) { return $this->application->getHelperSet()->get($name); } public function asText() { $messages = array( '<comment>Usage:</comment>', ' '.$this->getSynopsis(), '', ); if ($this->getAliases()) { $messages[] = '<comment>Aliases:</comment> <info>'.implode(', ', $this->getAliases()).'</info>'; } $messages[] = $this->definition->asText(); if ($help = $this->getProcessedHelp()) { $messages[] = '<comment>Help:</comment>'; $messages[] = ' '.implode("\n ", explode("\n", $help))."\n"; } return implode("\n", $messages); } public function asXml($asDom = false) { $dom = new \DOMDocument('1.0', 'UTF-8'); $dom->formatOutput = true; $dom->appendChild($commandXML = $dom->createElement('command')); $commandXML->setAttribute('id', $this->getFullName()); $commandXML->setAttribute('namespace', $this->getNamespace() ? $this->getNamespace() : '_global'); $commandXML->setAttribute('name', $this->getName()); $commandXML->appendChild($usageXML = $dom->createElement('usage')); $usageXML->appendChild($dom->createTextNode(sprintf($this->getSynopsis(), ''))); $commandXML->appendChild($descriptionXML = $dom->createElement('description')); $descriptionXML->appendChild($dom->createTextNode(implode("\n ", explode("\n", $this->getDescription())))); $commandXML->appendChild($helpXML = $dom->createElement('help')); $help = $this->help; $helpXML->appendChild($dom->createTextNode(implode("\n ", explode("\n", $help)))); $commandXML->appendChild($aliasesXML = $dom->createElement('aliases')); foreach ($this->getAliases() as $alias) { $aliasesXML->appendChild($aliasXML = $dom->createElement('alias')); $aliasXML->appendChild($dom->createTextNode($alias)); } $definition = $this->definition->asXml(true); $commandXML->appendChild($dom->importNode($definition->getElementsByTagName('arguments')->item(0), true)); $commandXML->appendChild($dom->importNode($definition->getElementsByTagName('options')->item(0), true)); return $asDom ? $dom : $dom->saveXml(); } } } namespace Symfony\Component\Console\Command { use Symfony\Component\Console\Input\InputArgument; use Symfony\Component\Console\Input\InputOption; use Symfony\Component\Console\Input\InputInterface; use Symfony\Component\Console\Output\OutputInterface; use Symfony\Component\Console\Output\Output; use Symfony\Component\Console\Command\Command; class HelpCommand extends Command { private $command; protected function configure() { $this->ignoreValidationErrors = true; $this ->setDefinition(array( new InputArgument('command_name', InputArgument::OPTIONAL, 'The command name', 'help'), new InputOption('xml', null, InputOption::VALUE_NONE, 'To output help as XML'), )) ->setName('help') ->setAliases(array('?')) ->setDescription('Displays help for a command') ->setHelp(<<<EOF
The <info>help</info> command displays help for a given command:
  <info>./symfony help list</info>
You can also output the help as XML by using the <comment>--xml</comment> option:
  <info>./symfony help --xml list</info>
EOF
); } public function setCommand(Command $command) { $this->command = $command; } protected function execute(InputInterface $input, OutputInterface $output) { if (null === $this->command) { $this->command = $this->getApplication()->get($input->getArgument('command_name')); } if ($input->getOption('xml')) { $output->writeln($this->command->asXml(), OutputInterface::OUTPUT_RAW); } else { $output->writeln($this->command->asText()); } } } } namespace Symfony\Component\Console\Input { class InputDefinition { private $arguments; private $requiredCount; private $hasAnArrayArgument = false; private $hasOptional; private $options; private $shortcuts; public function __construct(array $definition = array()) { $this->setDefinition($definition); } public function setDefinition(array $definition) { $arguments = array(); $options = array(); foreach ($definition as $item) { if ($item instanceof InputOption) { $options[] = $item; } else { $arguments[] = $item; } } $this->setArguments($arguments); $this->setOptions($options); } public function setArguments($arguments = array()) { $this->arguments = array(); $this->requiredCount = 0; $this->hasOptional = false; $this->hasAnArrayArgument = false; $this->addArguments($arguments); } public function addArguments($arguments = array()) { if (null !== $arguments) { foreach ($arguments as $argument) { $this->addArgument($argument); } } } public function addArgument(InputArgument $argument) { if (isset($this->arguments[$argument->getName()])) { throw new \LogicException(sprintf('An argument with name "%s" already exist.', $argument->getName())); } if ($this->hasAnArrayArgument) { throw new \LogicException('Cannot add an argument after an array argument.'); } if ($argument->isRequired() && $this->hasOptional) { throw new \LogicException('Cannot add a required argument after an optional one.'); } if ($argument->isArray()) { $this->hasAnArrayArgument = true; } if ($argument->isRequired()) { ++$this->requiredCount; } else { $this->hasOptional = true; } $this->arguments[$argument->getName()] = $argument; } public function getArgument($name) { $arguments = is_int($name) ? array_values($this->arguments) : $this->arguments; if (!$this->hasArgument($name)) { throw new \InvalidArgumentException(sprintf('The "%s" argument does not exist.', $name)); } return $arguments[$name]; } public function hasArgument($name) { $arguments = is_int($name) ? array_values($this->arguments) : $this->arguments; return isset($arguments[$name]); } public function getArguments() { return $this->arguments; } public function getArgumentCount() { return $this->hasAnArrayArgument ? PHP_INT_MAX : count($this->arguments); } public function getArgumentRequiredCount() { return $this->requiredCount; } public function getArgumentDefaults() { $values = array(); foreach ($this->arguments as $argument) { $values[$argument->getName()] = $argument->getDefault(); } return $values; } public function setOptions($options = array()) { $this->options = array(); $this->shortcuts = array(); $this->addOptions($options); } public function addOptions($options = array()) { foreach ($options as $option) { $this->addOption($option); } } public function addOption(InputOption $option) { if (isset($this->options[$option->getName()])) { throw new \LogicException(sprintf('An option named "%s" already exist.', $option->getName())); } else if (isset($this->shortcuts[$option->getShortcut()])) { throw new \LogicException(sprintf('An option with shortcut "%s" already exist.', $option->getShortcut())); } $this->options[$option->getName()] = $option; if ($option->getShortcut()) { $this->shortcuts[$option->getShortcut()] = $option->getName(); } } public function getOption($name) { if (!$this->hasOption($name)) { throw new \InvalidArgumentException(sprintf('The "--%s" option does not exist.', $name)); } return $this->options[$name]; } public function hasOption($name) { return isset($this->options[$name]); } public function getOptions() { return $this->options; } public function hasShortcut($name) { return isset($this->shortcuts[$name]); } public function getOptionForShortcut($shortcut) { return $this->getOption($this->shortcutToName($shortcut)); } public function getOptionDefaults() { $values = array(); foreach ($this->options as $option) { $values[$option->getName()] = $option->getDefault(); } return $values; } private function shortcutToName($shortcut) { if (!isset($this->shortcuts[$shortcut])) { throw new \InvalidArgumentException(sprintf('The "-%s" option does not exist.', $shortcut)); } return $this->shortcuts[$shortcut]; } public function getSynopsis() { $elements = array(); foreach ($this->getOptions() as $option) { $shortcut = $option->getShortcut() ? sprintf('-%s|', $option->getShortcut()) : ''; $elements[] = sprintf('['.($option->isValueRequired() ? '%s--%s="..."' : ($option->isValueOptional() ? '%s--%s[="..."]' : '%s--%s')).']', $shortcut, $option->getName()); } foreach ($this->getArguments() as $argument) { $elements[] = sprintf($argument->isRequired() ? '%s' : '[%s]', $argument->getName().($argument->isArray() ? '1' : '')); if ($argument->isArray()) { $elements[] = sprintf('... [%sN]', $argument->getName()); } } return implode(' ', $elements); } public function asText() { $max = 0; foreach ($this->getOptions() as $option) { $max = strlen($option->getName()) + 2 > $max ? strlen($option->getName()) + 2 : $max; } foreach ($this->getArguments() as $argument) { $max = strlen($argument->getName()) > $max ? strlen($argument->getName()) : $max; } ++$max; $text = array(); if ($this->getArguments()) { $text[] = '<comment>Arguments:</comment>'; foreach ($this->getArguments() as $argument) { if (null !== $argument->getDefault() && (!is_array($argument->getDefault()) || count($argument->getDefault()))) { $default = sprintf('<comment> (default: %s)</comment>', is_array($argument->getDefault()) ? str_replace("\n", '', var_export($argument->getDefault(), true)): $argument->getDefault()); } else { $default = ''; } $text[] = sprintf(" <info>%-${max}s</info> %s%s", $argument->getName(), $argument->getDescription(), $default); } $text[] = ''; } if ($this->getOptions()) { $text[] = '<comment>Options:</comment>'; foreach ($this->getOptions() as $option) { if ($option->acceptValue() && null !== $option->getDefault() && (!is_array($option->getDefault()) || count($option->getDefault()))) { $default = sprintf('<comment> (default: %s)</comment>', is_array($option->getDefault()) ? str_replace("\n", '', print_r($option->getDefault(), true)): $option->getDefault()); } else { $default = ''; } $multiple = $option->isArray() ? '<comment> (multiple values allowed)</comment>' : ''; $text[] = sprintf(' %-'.$max.'s %s%s%s%s', '<info>--'.$option->getName().'</info>', $option->getShortcut() ? sprintf('(-%s) ', $option->getShortcut()) : '', $option->getDescription(), $default, $multiple); } $text[] = ''; } return implode("\n", $text); } public function asXml($asDom = false) { $dom = new \DOMDocument('1.0', 'UTF-8'); $dom->formatOutput = true; $dom->appendChild($definitionXML = $dom->createElement('definition')); $definitionXML->appendChild($argumentsXML = $dom->createElement('arguments')); foreach ($this->getArguments() as $argument) { $argumentsXML->appendChild($argumentXML = $dom->createElement('argument')); $argumentXML->setAttribute('name', $argument->getName()); $argumentXML->setAttribute('is_required', $argument->isRequired() ? 1 : 0); $argumentXML->setAttribute('is_array', $argument->isArray() ? 1 : 0); $argumentXML->appendChild($descriptionXML = $dom->createElement('description')); $descriptionXML->appendChild($dom->createTextNode($argument->getDescription())); $argumentXML->appendChild($defaultsXML = $dom->createElement('defaults')); $defaults = is_array($argument->getDefault()) ? $argument->getDefault() : ($argument->getDefault() ? array($argument->getDefault()) : array()); foreach ($defaults as $default) { $defaultsXML->appendChild($defaultXML = $dom->createElement('default')); $defaultXML->appendChild($dom->createTextNode($default)); } } $definitionXML->appendChild($optionsXML = $dom->createElement('options')); foreach ($this->getOptions() as $option) { $optionsXML->appendChild($optionXML = $dom->createElement('option')); $optionXML->setAttribute('name', '--'.$option->getName()); $optionXML->setAttribute('shortcut', $option->getShortcut() ? '-'.$option->getShortcut() : ''); $optionXML->setAttribute('accept_value', $option->acceptValue() ? 1 : 0); $optionXML->setAttribute('is_value_required', $option->isValueRequired() ? 1 : 0); $optionXML->setAttribute('is_multiple', $option->isArray() ? 1 : 0); $optionXML->appendChild($descriptionXML = $dom->createElement('description')); $descriptionXML->appendChild($dom->createTextNode($option->getDescription())); if ($option->acceptValue()) { $optionXML->appendChild($defaultsXML = $dom->createElement('defaults')); $defaults = is_array($option->getDefault()) ? $option->getDefault() : ($option->getDefault() ? array($option->getDefault()) : array()); foreach ($defaults as $default) { $defaultsXML->appendChild($defaultXML = $dom->createElement('default')); $defaultXML->appendChild($dom->createTextNode($default)); } } } return $asDom ? $dom : $dom->saveXml(); } } } namespace Symfony\Component\Console\Input { class InputArgument { const REQUIRED = 1; const OPTIONAL = 2; const IS_ARRAY = 4; private $name; private $mode; private $default; private $description; public function __construct($name, $mode = null, $description = '', $default = null) { if (null === $mode) { $mode = self::OPTIONAL; } else if (is_string($mode) || $mode > 7) { throw new \InvalidArgumentException(sprintf('Argument mode "%s" is not valid.', $mode)); } $this->name = $name; $this->mode = $mode; $this->description = $description; $this->setDefault($default); } public function getName() { return $this->name; } public function isRequired() { return self::REQUIRED === (self::REQUIRED & $this->mode); } public function isArray() { return self::IS_ARRAY === (self::IS_ARRAY & $this->mode); } public function setDefault($default = null) { if (self::REQUIRED === $this->mode && null !== $default) { throw new \LogicException('Cannot set a default value except for Parameter::OPTIONAL mode.'); } if ($this->isArray()) { if (null === $default) { $default = array(); } else if (!is_array($default)) { throw new \LogicException('A default value for an array argument must be an array.'); } } $this->default = $default; } public function getDefault() { return $this->default; } public function getDescription() { return $this->description; } } } namespace Symfony\Component\Console\Input { class InputOption { const VALUE_NONE = 1; const VALUE_REQUIRED = 2; const VALUE_OPTIONAL = 4; const VALUE_IS_ARRAY = 8; private $name; private $shortcut; private $mode; private $default; private $description; public function __construct($name, $shortcut = null, $mode = null, $description = '', $default = null) { if ('--' === substr($name, 0, 2)) { $name = substr($name, 2); } if (empty($shortcut)) { $shortcut = null; } if (null !== $shortcut) { if ('-' === $shortcut[0]) { $shortcut = substr($shortcut, 1); } } if (null === $mode) { $mode = self::VALUE_NONE; } else if (!is_int($mode) || $mode > 15) { throw new \InvalidArgumentException(sprintf('Option mode "%s" is not valid.', $mode)); } $this->name = $name; $this->shortcut = $shortcut; $this->mode = $mode; $this->description = $description; if ($this->isArray() && !$this->acceptValue()) { throw new \InvalidArgumentException('Impossible to have an option mode VALUE_IS_ARRAY if the option does not accept a value.'); } $this->setDefault($default); } public function getShortcut() { return $this->shortcut; } public function getName() { return $this->name; } public function acceptValue() { return $this->isValueRequired() || $this->isValueOptional(); } public function isValueRequired() { return self::VALUE_REQUIRED === (self::VALUE_REQUIRED & $this->mode); } public function isValueOptional() { return self::VALUE_OPTIONAL === (self::VALUE_OPTIONAL & $this->mode); } public function isArray() { return self::VALUE_IS_ARRAY === (self::VALUE_IS_ARRAY & $this->mode); } public function setDefault($default = null) { if (self::VALUE_NONE === (self::VALUE_NONE & $this->mode) && null !== $default) { throw new \LogicException('Cannot set a default value when using Option::VALUE_NONE mode.'); } if ($this->isArray()) { if (null === $default) { $default = array(); } elseif (!is_array($default)) { throw new \LogicException('A default value for an array option must be an array.'); } } $this->default = $this->acceptValue() ? $default : false; } public function getDefault() { return $this->default; } public function getDescription() { return $this->description; } } } namespace Symfony\Component\Console\Command { use Symfony\Component\Console\Input\InputArgument; use Symfony\Component\Console\Input\InputOption; use Symfony\Component\Console\Input\InputInterface; use Symfony\Component\Console\Output\OutputInterface; use Symfony\Component\Console\Output\Output; use Symfony\Component\Console\Command\Command; class ListCommand extends Command { protected function configure() { $this ->setDefinition(array( new InputArgument('namespace', InputArgument::OPTIONAL, 'The namespace name'), new InputOption('xml', null, InputOption::VALUE_NONE, 'To output help as XML'), )) ->setName('list') ->setDescription('Lists commands') ->setHelp(<<<EOF
The <info>list</info> command lists all commands:
  <info>./symfony list</info>
You can also display the commands for a specific namespace:
  <info>./symfony list test</info>
You can also output the information as XML by using the <comment>--xml</comment> option:
  <info>./symfony list --xml</info>
EOF
); } protected function execute(InputInterface $input, OutputInterface $output) { if ($input->getOption('xml')) { $output->writeln($this->getApplication()->asXml($input->getArgument('namespace')), OutputInterface::OUTPUT_RAW); } else { $output->writeln($this->getApplication()->asText($input->getArgument('namespace'))); } } } } namespace Symfony\Component\Console\Input { abstract class Input implements InputInterface { protected $definition; protected $options; protected $arguments; protected $interactive = true; public function __construct(InputDefinition $definition = null) { if (null === $definition) { $this->definition = new InputDefinition(); } else { $this->bind($definition); $this->validate(); } } public function bind(InputDefinition $definition) { $this->arguments = array(); $this->options = array(); $this->definition = $definition; $this->parse(); } abstract protected function parse(); public function validate() { if (count($this->arguments) < $this->definition->getArgumentRequiredCount()) { throw new \RuntimeException('Not enough arguments.'); } } public function isInteractive() { return $this->interactive; } public function setInteractive($interactive) { $this->interactive = (Boolean) $interactive; } public function getArguments() { return array_merge($this->definition->getArgumentDefaults(), $this->arguments); } public function getArgument($name) { if (!$this->definition->hasArgument($name)) { throw new \InvalidArgumentException(sprintf('The "%s" argument does not exist.', $name)); } return isset($this->arguments[$name]) ? $this->arguments[$name] : $this->definition->getArgument($name)->getDefault(); } public function setArgument($name, $value) { if (!$this->definition->hasArgument($name)) { throw new \InvalidArgumentException(sprintf('The "%s" argument does not exist.', $name)); } $this->arguments[$name] = $value; } public function hasArgument($name) { return $this->definition->hasArgument($name); } public function getOptions() { return array_merge($this->definition->getOptionDefaults(), $this->options); } public function getOption($name) { if (!$this->definition->hasOption($name)) { throw new \InvalidArgumentException(sprintf('The "%s" option does not exist.', $name)); } return isset($this->options[$name]) ? $this->options[$name] : $this->definition->getOption($name)->getDefault(); } public function setOption($name, $value) { if (!$this->definition->hasOption($name)) { throw new \InvalidArgumentException(sprintf('The "%s" option does not exist.', $name)); } $this->options[$name] = $value; } public function hasOption($name) { return $this->definition->hasOption($name); } } } namespace Symfony\Component\Console\Input { class ArgvInput extends Input { private $tokens; private $parsed; public function __construct(array $argv = null, InputDefinition $definition = null) { if (null === $argv) { $argv = $_SERVER['argv']; } array_shift($argv); $this->tokens = $argv; parent::__construct($definition); } protected function setTokens(array $tokens) { $this->tokens = $tokens; } protected function parse() { $this->parsed = $this->tokens; while (null !== $token = array_shift($this->parsed)) { if ('--' === substr($token, 0, 2)) { $this->parseLongOption($token); } elseif ('-' === $token[0]) { $this->parseShortOption($token); } else { $this->parseArgument($token); } } } private function parseShortOption($token) { $name = substr($token, 1); if (strlen($name) > 1) { if ($this->definition->hasShortcut($name[0]) && $this->definition->getOptionForShortcut($name[0])->acceptValue()) { $this->addShortOption($name[0], substr($name, 1)); } else { $this->parseShortOptionSet($name); } } else { $this->addShortOption($name, null); } } private function parseShortOptionSet($name) { $len = strlen($name); for ($i = 0; $i < $len; $i++) { if (!$this->definition->hasShortcut($name[$i])) { throw new \RuntimeException(sprintf('The "-%s" option does not exist.', $name[$i])); } $option = $this->definition->getOptionForShortcut($name[$i]); if ($option->acceptValue()) { $this->addLongOption($option->getName(), $i === $len - 1 ? null : substr($name, $i + 1)); break; } else { $this->addLongOption($option->getName(), true); } } } private function parseLongOption($token) { $name = substr($token, 2); if (false !== $pos = strpos($name, '=')) { $this->addLongOption(substr($name, 0, $pos), substr($name, $pos + 1)); } else { $this->addLongOption($name, null); } } private function parseArgument($token) { $c = count($this->arguments); if ($this->definition->hasArgument($c)) { $arg = $this->definition->getArgument($c); $this->arguments[$arg->getName()] = $arg->isArray()? array($token) : $token; } elseif ($this->definition->hasArgument($c - 1) && $this->definition->getArgument($c - 1)->isArray()) { $arg = $this->definition->getArgument($c - 1); $this->arguments[$arg->getName()][] = $token; } else { throw new \RuntimeException('Too many arguments.'); } } private function addShortOption($shortcut, $value) { if (!$this->definition->hasShortcut($shortcut)) { throw new \RuntimeException(sprintf('The "-%s" option does not exist.', $shortcut)); } $this->addLongOption($this->definition->getOptionForShortcut($shortcut)->getName(), $value); } private function addLongOption($name, $value) { if (!$this->definition->hasOption($name)) { throw new \RuntimeException(sprintf('The "--%s" option does not exist.', $name)); } $option = $this->definition->getOption($name); if (null === $value && $option->acceptValue()) { $next = array_shift($this->parsed); if ('-' !== $next[0]) { $value = $next; } else { array_unshift($this->parsed, $next); } } if (null === $value) { if ($option->isValueRequired()) { throw new \RuntimeException(sprintf('The "--%s" option requires a value.', $name)); } $value = $option->isValueOptional() ? $option->getDefault() : true; } $this->options[$name] = $value; } public function getFirstArgument() { foreach ($this->tokens as $token) { if ($token && '-' === $token[0]) { continue; } return $token; } } public function hasParameterOption($values) { if (!is_array($values)) { $values = array($values); } foreach ($this->tokens as $v) { if (in_array($v, $values)) { return true; } } return false; } public function getParameterOption($values, $default = false) { if (!is_array($values)) { $values = array($values); } $tokens = $this->tokens; while ($token = array_shift($tokens)) { foreach ($values as $value) { if (0 === strpos($token, $value)) { if (false !== $pos = strpos($token, '=')) { return substr($token, $pos + 1); } return array_shift($tokens); } } } return $default; } } } namespace Symfony\Component\Console\Output { use Symfony\Component\Console\Formatter\OutputFormatterInterface; use Symfony\Component\Console\Formatter\OutputFormatter; abstract class Output implements OutputInterface { private $verbosity; private $formatter; public function __construct($verbosity = self::VERBOSITY_NORMAL, $decorated = null, OutputFormatterInterface $formatter = null) { if (null === $formatter) { $formatter = new OutputFormatter(); } $this->verbosity = null === $verbosity ? self::VERBOSITY_NORMAL : $verbosity; $this->formatter = $formatter; $this->formatter->setDecorated((Boolean) $decorated); } public function setFormatter(OutputFormatterInterface $formatter) { $this->formatter = $formatter; } public function getFormatter() { return $this->formatter; } public function setDecorated($decorated) { $this->formatter->setDecorated((Boolean) $decorated); } public function isDecorated() { return $this->formatter->isDecorated(); } public function setVerbosity($level) { $this->verbosity = (int) $level; } public function getVerbosity() { return $this->verbosity; } public function writeln($messages, $type = 0) { $this->write($messages, true, $type); } public function write($messages, $newline = false, $type = 0) { if (self::VERBOSITY_QUIET === $this->verbosity) { return; } if (!is_array($messages)) { $messages = array($messages); } foreach ($messages as $message) { switch ($type) { case OutputInterface::OUTPUT_NORMAL: $message = $this->formatter->format($message); break; case OutputInterface::OUTPUT_RAW: break; case OutputInterface::OUTPUT_PLAIN: $message = strip_tags($this->formatter->format($message)); break; default: throw new \InvalidArgumentException(sprintf('Unknown output type given (%s)', $type)); } $this->doWrite($message, $newline); } } abstract public function doWrite($message, $newline); } } namespace Symfony\Component\Console\Output { use Symfony\Component\Console\Formatter\OutputFormatter; class StreamOutput extends Output { private $stream; public function __construct($stream, $verbosity = self::VERBOSITY_NORMAL, $decorated = null, OutputFormatter $formatter = null) { if (!is_resource($stream) || 'stream' !== get_resource_type($stream)) { throw new \InvalidArgumentException('The StreamOutput class needs a stream as its first argument.'); } $this->stream = $stream; if (null === $decorated) { $decorated = $this->hasColorSupport($decorated); } parent::__construct($verbosity, $decorated, $formatter); } public function getStream() { return $this->stream; } public function doWrite($message, $newline) { if (false === @fwrite($this->stream, $message.($newline ? PHP_EOL : ''))) { throw new \RuntimeException('Unable to write output.'); } fflush($this->stream); } protected function hasColorSupport() { if (DIRECTORY_SEPARATOR == '\\') { return false !== getenv('ANSICON'); } return function_exists('posix_isatty') && @posix_isatty($this->stream); } } } namespace Symfony\Component\Console\Output { use Symfony\Component\Console\Formatter\OutputFormatter; class ConsoleOutput extends StreamOutput { public function __construct($verbosity = self::VERBOSITY_NORMAL, $decorated = null, OutputFormatter $formatter = null) { parent::__construct(fopen('php://stdout', 'w'), $verbosity, $decorated, $formatter); } } } namespace Symfony\Component\Console\Formatter { class OutputFormatter implements OutputFormatterInterface { private $decorated; private $styles = array(); public function __construct($decorated = null, array $styles = array()) { $this->decorated = (Boolean) $decorated; $this->setStyle('error', new OutputFormatterStyle('white', 'red')); $this->setStyle('info', new OutputFormatterStyle('green')); $this->setStyle('comment', new OutputFormatterStyle('yellow')); $this->setStyle('question', new OutputFormatterStyle('black', 'cyan')); foreach ($styles as $name => $style) { $this->setStyle($name, $style); } } public function setDecorated($decorated) { $this->decorated = (Boolean) $decorated; } public function isDecorated() { return $this->decorated; } public function setStyle($name, OutputFormatterStyleInterface $style) { $this->styles[strtolower($name)] = $style; } public function hasStyle($name) { return isset($this->styles[strtolower($name)]); } public function getStyle($name) { if (!$this->hasStyle($name)) { throw new \InvalidArgumentException('Undefined style: ' . $name); } return $this->styles[strtolower($name)]; } public function format($message) { $message = preg_replace_callback( $this->getBeginStyleRegex(), array($this, 'replaceBeginStyle'), $message ); return preg_replace_callback( $this->getEndStyleRegex(), array($this, 'replaceEndStyle'), $message ); } protected function getBeginStyleRegex() { return '#<([a-z][a-z0-9\-_=;]+)>#i'; } protected function getEndStyleRegex() { return '#</([a-z][a-z0-9\-_]*)?>#i'; } private function replaceBeginStyle($match) { if (!$this->isDecorated()) { return ''; } if (isset($this->styles[strtolower($match[1])])) { $style = $this->styles[strtolower($match[1])]; } else { $style = $this->createStyleFromString($match[1]); if (false === $style) { return $match[0]; } } return $style->getBeginStyle(); } private function replaceEndStyle($match) { if (!$this->isDecorated()) { return ''; } if (!isset($match[1])) { $match[1] = ''; } if ('' == $match[1]) { $style = new OutputFormatterStyle(); } else { if (!isset($this->styles[strtolower($match[1])])) { return $match[0]; } $style = $this->styles[strtolower($match[1])]; } return $style->getEndStyle(); } private function createStyleFromString($string) { if (!preg_match_all('/([^=]+)=([^;]+)(;|$)/', strtolower($string), $matches, PREG_SET_ORDER)) { return false; } $style = new OutputFormatterStyle(); foreach ($matches as $match) { array_shift($match); if ('fg' == $match[0]) { $style->setForeground($match[1]); } elseif ('bg' == $match[0]) { $style->setBackground($match[1]); } else { $style->setOption($match[1]); } } return $style; } } } namespace Symfony\Component\Console\Formatter { class OutputFormatterStyle implements OutputFormatterStyleInterface { static private $availableForegroundColors = array( 'black' => 30, 'red' => 31, 'green' => 32, 'yellow' => 33, 'blue' => 34, 'magenta' => 35, 'cyan' => 36, 'white' => 37 ); static private $availableBackgroundColors = array( 'black' => 40, 'red' => 41, 'green' => 42, 'yellow' => 43, 'blue' => 44, 'magenta' => 45, 'cyan' => 46, 'white' => 47 ); static private $availableOptions = array( 'bold' => 1, 'underscore' => 4, 'blink' => 5, 'reverse' => 7, 'conceal' => 8 ); private $foreground; private $background; private $options = array(); public function __construct($foreground = null, $background = null, array $options = array()) { if (null !== $foreground) { $this->setForeground($foreground); } if (null !== $background) { $this->setBackground($background); } if (count($options)) { $this->setOptions($options); } } public function setForeground($color = null) { if (null === $color) { $this->foreground = null; return; } if (!isset(static::$availableForegroundColors[$color])) { throw new \InvalidArgumentException(sprintf( 'Invalid foreground color specified: "%s". Expected one of (%s)', $color, implode(', ', array_keys(static::$availableForegroundColors)) )); } $this->foreground = static::$availableForegroundColors[$color]; } public function setBackground($color = null) { if (null === $color) { $this->background = null; return; } if (!isset(static::$availableBackgroundColors[$color])) { throw new \InvalidArgumentException(sprintf( 'Invalid background color specified: "%s". Expected one of (%s)', $color, implode(', ', array_keys(static::$availableBackgroundColors)) )); } $this->background = static::$availableBackgroundColors[$color]; } public function setOption($option) { if (!isset(static::$availableOptions[$option])) { throw new \InvalidArgumentException(sprintf( 'Invalid option specified: "%s". Expected one of (%s)', $option, implode(', ', array_keys(static::$availableOptions)) )); } if (false === array_search(static::$availableOptions[$option], $this->options)) { $this->options[] = static::$availableOptions[$option]; } } public function unsetOption($option) { if (!isset(static::$availableOptions[$option])) { throw new \InvalidArgumentException(sprintf( 'Invalid option specified: "%s". Expected one of (%s)', $option, implode(', ', array_keys(static::$availableOptions)) )); } $pos = array_search(static::$availableOptions[$option], $this->options); if (false !== $pos) { unset($this->options[$pos]); } } public function setOptions(array $options) { $this->options = array(); foreach ($options as $option) { $this->setOption($option); } } public function getBeginStyle() { $codes = array(); if (null !== $this->foreground) { $codes[] = $this->foreground; } if (null !== $this->background) { $codes[] = $this->background; } if (count($this->options)) { $codes = array_merge($codes, $this->options); } return "\033[" . implode(';', $codes) . 'm'; } public function getEndStyle() { return "\033[0m"; } } } namespace Symfony\Component\Console\Input { class ArrayInput extends Input { private $parameters; public function __construct(array $parameters, InputDefinition $definition = null) { $this->parameters = $parameters; parent::__construct($definition); } public function getFirstArgument() { foreach ($this->parameters as $key => $value) { if ($key && '-' === $key[0]) { continue; } return $value; } } public function hasParameterOption($values) { if (!is_array($values)) { $values = array($values); } foreach ($this->parameters as $k => $v) { if (!is_int($k)) { $v = $k; } if (in_array($v, $values)) { return true; } } return false; } public function getParameterOption($values, $default = false) { if (!is_array($values)) { $values = array($values); } foreach ($this->parameters as $k => $v) { if (is_int($k) && in_array($v, $values)) { return true; } elseif (in_array($k, $values)) { return $v; } } return $default; } protected function parse() { foreach ($this->parameters as $key => $value) { if ('--' === substr($key, 0, 2)) { $this->addLongOption(substr($key, 2), $value); } elseif ('-' === $key[0]) { $this->addShortOption(substr($key, 1), $value); } else { $this->addArgument($key, $value); } } } private function addShortOption($shortcut, $value) { if (!$this->definition->hasShortcut($shortcut)) { throw new \InvalidArgumentException(sprintf('The "-%s" option does not exist.', $shortcut)); } $this->addLongOption($this->definition->getOptionForShortcut($shortcut)->getName(), $value); } private function addLongOption($name, $value) { if (!$this->definition->hasOption($name)) { throw new \InvalidArgumentException(sprintf('The "--%s" option does not exist.', $name)); } $option = $this->definition->getOption($name); if (null === $value) { if ($option->isValueRequired()) { throw new \InvalidArgumentException(sprintf('The "--%s" option requires a value.', $name)); } $value = $option->isValueOptional() ? $option->getDefault() : true; } $this->options[$name] = $value; } private function addArgument($name, $value) { if (!$this->definition->hasArgument($name)) { throw new \InvalidArgumentException(sprintf('The "%s" argument does not exist.', $name)); } $this->arguments[$name] = $value; } } } namespace Symfony\Component\HttpKernel\Exception { interface HttpExceptionInterface { function getStatusCode(); function getHeaders(); } } namespace Symfony\Component\HttpKernel\Exception { class HttpException extends \RuntimeException implements HttpExceptionInterface { private $statusCode; private $headers; public function __construct($statusCode, $message = null, \Exception $previous = null, array $headers = array(), $code = 0) { $this->statusCode = $statusCode; $this->headers = $headers; parent::__construct($message, $code, $previous); } public function getStatusCode() { return $this->statusCode; } public function getHeaders() { return $this->headers; } } } namespace Symfony\Component\HttpKernel\Exception { class NotFoundHttpException extends HttpException { public function __construct($message = null, \Exception $previous = null, $code = 0) { parent::__construct(404, $message, $previous, array(), $code); } } } namespace Symfony\Component\Routing\Matcher\Exception { interface Exception { } } namespace Symfony\Component\Routing\Matcher\Exception { class NotFoundException extends \RuntimeException implements Exception { } } namespace Symfony\Component\Routing\Matcher\Exception { class MethodNotAllowedException extends \RuntimeException implements Exception { protected $allowedMethods; public function __construct(array $allowedMethods, $message = null, $code = 0, \Exception $previous = null) { $this->allowedMethods = $allowedMethods; parent::__construct($message, $code, $previous); } public function getAllowedMethods() { return $this->allowedMethods; } } } namespace { class Pimple implements ArrayAccess { private $values = array(); function offsetSet($id, $value) { $this->values[$id] = $value; } function offsetGet($id) { if (!isset($this->values[$id])) { throw new InvalidArgumentException(sprintf('Identifier "%s" is not defined.', $id)); } return is_callable($this->values[$id]) ? $this->values[$id]($this) : $this->values[$id]; } function offsetExists($id) { return isset($this->values[$id]); } function offsetUnset($id) { unset($this->values[$id]); } function share($callable) { return function ($c) use ($callable) { static $object; if (is_null($object)) { $object = $callable($c); } return $object; }; } function protect($callable) { return function ($c) use ($callable) { return $callable; }; } } } namespace Silex { use Symfony\Component\HttpKernel\HttpKernel; use Symfony\Component\HttpKernel\HttpKernelInterface; use Symfony\Component\HttpKernel\Controller\ControllerResolver; use Symfony\Component\HttpKernel\Event\KernelEvent; use Symfony\Component\HttpKernel\Event\GetResponseForControllerResultEvent; use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent; use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException; use Symfony\Component\HttpKernel\Exception\NotFoundHttpException; use Symfony\Component\HttpKernel\Events as HttpKernelEvents; use Symfony\Component\HttpFoundation\Request; use Symfony\Component\HttpFoundation\RedirectResponse; use Symfony\Component\EventDispatcher\Event; use Symfony\Component\EventDispatcher\EventDispatcher; use Symfony\Component\EventDispatcher\EventSubscriberInterface; use Symfony\Component\Routing\Route; use Symfony\Component\Routing\RouteCollection; use Symfony\Component\Routing\Matcher\Exception\MethodNotAllowedException; use Symfony\Component\Routing\Matcher\Exception\NotFoundException; use Symfony\Component\ClassLoader\UniversalClassLoader; use Silex\RedirectableUrlMatcher; class Application extends \Pimple implements HttpKernelInterface, EventSubscriberInterface { public function __construct() { $app = $this; $this['autoloader'] = $this->share(function () { $loader = new UniversalClassLoader(); $loader->register(); return $loader; }); $this['routes'] = $this->share(function () { return new RouteCollection(); }); $this['controllers'] = $this->share(function () use ($app) { return new ControllerCollection($app['routes']); }); $this['dispatcher'] = $this->share(function () use ($app) { $dispatcher = new EventDispatcher(); $dispatcher->addSubscriber($app); $dispatcher->addListener(HttpKernelEvents::onCoreView, $app, -10); return $dispatcher; }); $this['resolver'] = $this->share(function () { return new ControllerResolver(); }); $this['kernel'] = $this->share(function () use ($app) { return new HttpKernel($app['dispatcher'], $app['resolver']); }); } public function register(ExtensionInterface $extension, array $values = array()) { foreach ($values as $key => $value) { $this[$key] = $value; } $extension->register($this); } public function match($pattern, $to, $method = null) { $requirements = array(); if ($method) { $requirements['_method'] = $method; } $route = new Route($pattern, array('_controller' => $to), $requirements); $controller = new Controller($route); $this['controllers']->add($controller); return $controller; } public function get($pattern, $to) { return $this->match($pattern, $to, 'GET'); } public function post($pattern, $to) { return $this->match($pattern, $to, 'POST'); } public function put($pattern, $to) { return $this->match($pattern, $to, 'PUT'); } public function delete($pattern, $to) { return $this->match($pattern, $to, 'DELETE'); } public function before($callback) { $this['dispatcher']->addListener(Events::onSilexBefore, $callback); } public function after($callback) { $this['dispatcher']->addListener(Events::onSilexAfter, $callback); } public function error($callback) { $this['dispatcher']->addListener(Events::onSilexError, function(GetResponseForErrorEvent $event) use ($callback) { $exception = $event->getException(); $result = $callback->__invoke($exception); if (null !== $result) { $event->setStringResponse($result); } }); } public function flush() { $this['controllers']->flush(); } public function redirect($url, $status = 302) { return new RedirectResponse($url, $status); } public function run(Request $request = null) { if (null === $request) { $request = Request::createFromGlobals(); } $this->handle($request)->send(); } function handle(Request $request, $type = HttpKernelInterface::MASTER_REQUEST, $catch = true) { return $this['kernel']->handle($request, $type, $catch); } public function onCoreRequest(KernelEvent $event) { $this['request'] = $event->getRequest(); $this['controllers']->flush(); $matcher = new RedirectableUrlMatcher($this['routes'], array( 'base_url' => $this['request']->getBaseUrl(), 'method' => $this['request']->getMethod(), 'host' => $this['request']->getHost(), 'port' => $this['request']->getPort(), 'is_secure' => $this['request']->isSecure(), )); $this['dispatcher']->dispatch(Events::onSilexBefore); try { $attributes = $matcher->match($this['request']->getPathInfo()); $this['request']->attributes->add($attributes); } catch (NotFoundException $e) { $message = sprintf('No route found for "%s %s"', $this['request']->getMethod(), $this['request']->getPathInfo()); throw new NotFoundHttpException($message, $e); } catch (MethodNotAllowedException $e) { $message = sprintf('No route found for "%s %s": Method Not Allowed (Allow: %s)', $this['request']->getMethod(), $this['request']->getPathInfo(), strtoupper(implode(', ', $e->getAllowedMethods()))); throw new MethodNotAllowedHttpException($e->getAllowedMethods(), $message, $e); } } public function onCoreView(GetResponseForControllerResultEvent $event) { $response = $event->getControllerResult(); $converter = new StringResponseConverter(); $event->setResponse($converter->convert($response)); } public function onCoreResponse(Event $event) { $this['dispatcher']->dispatch(Events::onSilexAfter); } public function onCoreException(GetResponseForExceptionEvent $event) { $errorEvent = new GetResponseForErrorEvent($this, $event->getRequest(), $event->getRequestType(), $event->getException()); $this['dispatcher']->dispatch(Events::onSilexError, $errorEvent); if ($errorEvent->hasResponse()) { $event->setResponse($errorEvent->getResponse()); } } static public function getSubscribedEvents() { return array( HttpKernelEvents::onCoreRequest, HttpKernelEvents::onCoreResponse, HttpKernelEvents::onCoreException, ); } } } namespace Silex\Extension { use Silex\Application; use Silex\ExtensionInterface; use Symfony\Component\Routing\Generator\UrlGenerator; class SymfonyBridgesExtension implements ExtensionInterface { public function register(Application $app) { $app['symfony_bridges'] = true; if (isset($app['symfony_bridges.class_path'])) { $app['autoloader']->registerNamespace('Symfony\\Bridge', $app['symfony_bridges.class_path']); } } } } namespace Silex\Extension { use Silex\Application; use Silex\ExtensionInterface; use Symfony\Component\Routing\Generator\UrlGenerator; class UrlGeneratorExtension implements ExtensionInterface { public function register(Application $app) { $app['url_generator'] = $app->share(function() use ($app) { $app->flush(); return new UrlGenerator($app['routes'], array( 'base_url' => $app['request']->getBaseUrl(), 'method' => $app['request']->getMethod(), 'host' => $app['request']->getHost(), 'port' => $app['request']->getPort(), 'is_secure' => $app['request']->isSecure(), )); }); } } } namespace Silex\Extension { use Silex\Application; use Silex\ExtensionInterface; use Symfony\Bridge\Twig\Extension\RoutingExtension; use Symfony\Bridge\Twig\Extension\TranslationExtension as TwigTranslationExtension; class TwigExtension implements ExtensionInterface { public function register(Application $app) { $app['twig'] = $app->share(function () use ($app) { $twig = new \Twig_Environment($app['twig.loader'], isset($app['twig.options']) ? $app['twig.options'] : array()); $twig->addGlobal('app', $app); if (isset($app['symfony_bridges'])) { if (isset($app['url_generator'])) { $twig->addExtension(new RoutingExtension($app['url_generator'])); } if (isset($app['translator'])) { $twig->addExtension(new TwigTranslationExtension($app['translator'])); } } if (isset($app['twig.configure'])) { $app['twig.configure']($twig); } return $twig; }); $app['twig.loader'] = $app->share(function () use ($app) { if (isset($app['twig.templates'])) { return new \Twig_Loader_Array($app['twig.templates']); } else { return new \Twig_Loader_Filesystem($app['twig.path']); } }); if (isset($app['twig.class_path'])) { $app['autoloader']->registerPrefix('Twig_', $app['twig.class_path']); } } } } namespace Symfony\Component\EventDispatcher { class EventDispatcher implements EventDispatcherInterface { private $listeners = array(); private $sorted = array(); public function dispatch($eventName, Event $event = null) { if (!isset($this->listeners[$eventName])) { return; } if (null === $event) { $event = new Event(); } foreach ($this->getListeners($eventName) as $listener) { $this->triggerListener($listener, $eventName, $event); if ($event->isPropagationStopped()) { break; } } } public function getListeners($eventName = null) { if (null !== $eventName) { if (!isset($this->sorted[$eventName])) { $this->sortListeners($eventName); } return $this->sorted[$eventName]; } $sorted = array(); foreach (array_keys($this->listeners) as $eventName) { if (!isset($this->sorted[$eventName])) { $this->sortListeners($eventName); } if ($this->sorted[$eventName]) { $sorted[$eventName] = $this->sorted[$eventName]; } } return $sorted; } public function hasListeners($eventName = null) { return (Boolean) count($this->getListeners($eventName)); } public function addListener($eventNames, $listener, $priority = 0) { foreach ((array) $eventNames as $eventName) { if (!isset($this->listeners[$eventName][$priority])) { if (!isset($this->listeners[$eventName])) { $this->listeners[$eventName] = array(); } $this->listeners[$eventName][$priority] = new \SplObjectStorage(); } $this->listeners[$eventName][$priority]->attach($listener); unset($this->sorted[$eventName]); } } public function removeListener($eventNames, $listener) { foreach ((array) $eventNames as $eventName) { if (!isset($this->listeners[$eventName])) { continue; } foreach (array_keys($this->listeners[$eventName]) as $priority) { if (isset($this->listeners[$eventName][$priority][$listener])) { unset($this->listeners[$eventName][$priority][$listener], $this->sorted[$eventName]); } } } } public function addSubscriber(EventSubscriberInterface $subscriber, $priority = 0) { $this->addListener($subscriber->getSubscribedEvents(), $subscriber, $priority); } public function removeSubscriber(EventSubscriberInterface $subscriber) { $this->removeListener($subscriber->getSubscribedEvents(), $subscriber); } protected function triggerListener($listener, $eventName, Event $event) { if ($listener instanceof \Closure) { $listener->__invoke($event); } else { $listener->$eventName($event); } } private function sortListeners($eventName) { $this->sorted[$eventName] = array(); if (isset($this->listeners[$eventName])) { krsort($this->listeners[$eventName]); foreach ($this->listeners[$eventName] as $listeners) { foreach ($listeners as $listener) { $this->sorted[$eventName][] = $listener; } } } } } } namespace Symfony\Component\HttpKernel { final class Events { const onCoreRequest = 'onCoreRequest'; const onCoreException = 'onCoreException'; const onCoreView = 'onCoreView'; const onCoreController = 'onCoreController'; const onCoreResponse = 'onCoreResponse'; }} namespace Silex { final class Events { const onSilexBefore = 'onSilexBefore'; const onSilexAfter = 'onSilexAfter'; const onSilexError = 'onSilexError'; } } namespace Symfony\Component\Routing { class Route { private $pattern; private $defaults; private $requirements; private $options; private $compiled; static private $compilers = array(); public function __construct($pattern, array $defaults = array(), array $requirements = array(), array $options = array()) { $this->setPattern($pattern); $this->setDefaults($defaults); $this->setRequirements($requirements); $this->setOptions($options); } public function getPattern() { return $this->pattern; } public function setPattern($pattern) { $this->pattern = trim($pattern); if (empty($this->pattern) || '/' !== $this->pattern[0]) { $this->pattern = '/'.$this->pattern; } return $this; } public function getOptions() { return $this->options; } public function setOptions(array $options) { $this->options = array_merge(array( 'segment_separators' => array('/', '.'), 'text_regex' => '.+?', 'compiler_class' => 'Symfony\\Component\\Routing\\RouteCompiler', ), $options); return $this; } public function getOption($name) { return isset($this->options[$name]) ? $this->options[$name] : null; } public function getDefaults() { return $this->defaults; } public function setDefaults(array $defaults) { $this->defaults = $defaults; return $this; } public function getDefault($name) { return isset($this->defaults[$name]) ? $this->defaults[$name] : null; } public function setDefault($name, $default) { $this->defaults[$name] = $default; } public function getRequirements() { return $this->requirements; } public function setRequirements(array $requirements) { $this->requirements = array(); foreach ($requirements as $key => $regex) { $this->requirements[$key] = $this->sanitizeRequirement($key, $regex); } return $this; } public function getRequirement($key) { return isset($this->requirements[$key]) ? $this->requirements[$key] : null; } public function setRequirement($key, $regex) { return $this->requirements[$key] = $this->sanitizeRequirement($key, $regex); } public function compile() { if (null !== $this->compiled) { return $this->compiled; } $class = $this->getOption('compiler_class'); if (!isset(static::$compilers[$class])) { static::$compilers[$class] = new $class; } return $this->compiled = static::$compilers[$class]->compile($this); } private function sanitizeRequirement($key, $regex) { if (is_array($regex)) { throw new \InvalidArgumentException(sprintf('Routing requirements must be a string, array given for "%s"', $key)); } if ('^' == $regex[0]) { $regex = substr($regex, 1); } if ('$' == substr($regex, -1)) { $regex = substr($regex, 0, -1); } return $regex; } } } namespace Silex { use Silex\Exception\ControllerFrozenException; use Symfony\Component\Routing\Route; class Controller { private $route; private $routeName; private $isFrozen = false; public function __construct(Route $route) { $this->route = $route; $this->bind($this->defaultRouteName()); } public function getRoute() { return $this->route; } public function getRouteName() { return $this->routeName; } public function bind($routeName) { if ($this->isFrozen) { throw new ControllerFrozenException(sprintf('Calling %s on frozen %s instance.', __METHOD__, __CLASS__)); } $this->routeName = $routeName; return $this; } public function assert($variable, $regexp) { $this->route->setRequirement($variable, $regexp); return $this; } public function freeze() { $this->isFrozen = true; } private function defaultRouteName() { $requirements = $this->route->getRequirements(); $method = isset($requirements['_method']) ? $requirements['_method'] : ''; $routeName = $method.$this->route->getPattern(); $routeName = str_replace(array('/', ':', '|', '-'), '_', $routeName); $routeName = preg_replace('/[^a-z0-9A-Z_.]+/', '', $routeName); return $routeName; } } } namespace Silex { use Symfony\Component\Routing\RouteCollection; class ControllerCollection { private $controllers = array(); private $routes; public function __construct(RouteCollection $routes) { $this->routes = $routes; } public function add(Controller $controller) { $this->controllers[] = $controller; } public function flush() { foreach ($this->controllers as $controller) { $this->routes->add($controller->getRouteName(), $controller->getRoute()); $controller->freeze(); } $this->controllers = array(); } } } namespace Symfony\Component\Routing { use Symfony\Component\Config\Resource\ResourceInterface; class RouteCollection { private $routes; private $resources; public function __construct() { $this->routes = array(); $this->resources = array(); } public function add($name, Route $route) { if (!preg_match('/^[a-z0-9A-Z_.]+$/', $name)) { throw new \InvalidArgumentException(sprintf('Name "%s" contains non valid characters for a route name.', $name)); } $this->routes[$name] = $route; } public function all() { return $this->routes; } public function get($name) { return isset($this->routes[$name]) ? $this->routes[$name] : null; } public function addCollection(RouteCollection $collection, $prefix = '') { $collection->addPrefix($prefix); foreach ($collection->getResources() as $resource) { $this->addResource($resource); } $this->routes = array_merge($this->routes, $collection->all()); } public function addPrefix($prefix) { if (!$prefix) { return; } foreach ($this->all() as $route) { $route->setPattern($prefix.$route->getPattern()); } } public function getResources() { return array_unique($this->resources); } public function addResource(ResourceInterface $resource) { $this->resources[] = $resource; } } } namespace Symfony\Component\HttpFoundation { use Symfony\Component\HttpFoundation\SessionStorage\NativeSessionStorage; use Symfony\Component\HttpFoundation\File\UploadedFile; class Request { public $attributes; public $request; public $query; public $server; public $files; public $cookies; public $headers; protected $content; protected $languages; protected $charsets; protected $acceptableContentTypes; protected $pathInfo; protected $requestUri; protected $baseUrl; protected $basePath; protected $method; protected $format; protected $session; static protected $formats; public function __construct(array $query = array(), array $request = array(), array $attributes = array(), array $cookies = array(), array $files = array(), array $server = array(), $content = null) { $this->initialize($query, $request, $attributes, $cookies, $files, $server, $content); } public function initialize(array $query = array(), array $request = array(), array $attributes = array(), array $cookies = array(), array $files = array(), array $server = array(), $content = null) { $this->request = new ParameterBag($request); $this->query = new ParameterBag($query); $this->attributes = new ParameterBag($attributes); $this->cookies = new ParameterBag($cookies); $this->files = new FileBag($files); $this->server = new ServerBag($server); $this->headers = new HeaderBag($this->server->getHeaders()); $this->content = $content; $this->languages = null; $this->charsets = null; $this->acceptableContentTypes = null; $this->pathInfo = null; $this->requestUri = null; $this->baseUrl = null; $this->basePath = null; $this->method = null; $this->format = null; } static public function createfromGlobals() { return new static($_GET, $_POST, array(), $_COOKIE, $_FILES, $_SERVER); } static public function create($uri, $method = 'GET', $parameters = array(), $cookies = array(), $files = array(), $server = array(), $content = null) { $defaults = array( 'SERVER_NAME' => 'localhost', 'SERVER_PORT' => 80, 'HTTP_HOST' => 'localhost', 'HTTP_USER_AGENT' => 'Symfony/2.X', 'HTTP_ACCEPT' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'HTTP_ACCEPT_LANGUAGE' => 'en-us,en;q=0.5', 'HTTP_ACCEPT_CHARSET' => 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'REMOTE_ADDR' => '127.0.0.1', 'SCRIPT_NAME' => '', 'SCRIPT_FILENAME' => '', ); $components = parse_url($uri); if (isset($components['host'])) { $defaults['SERVER_NAME'] = $components['host']; $defaults['HTTP_HOST'] = $components['host']; } if (isset($components['scheme'])) { if ('https' === $components['scheme']) { $defaults['HTTPS'] = 'on'; $defaults['SERVER_PORT'] = 443; } } if (isset($components['port'])) { $defaults['SERVER_PORT'] = $components['port']; $defaults['HTTP_HOST'] = $defaults['HTTP_HOST'].':'.$components['port']; } if (in_array(strtoupper($method), array('POST', 'PUT', 'DELETE'))) { $request = $parameters; $query = array(); $defaults['CONTENT_TYPE'] = 'application/x-www-form-urlencoded'; } else { $request = array(); $query = $parameters; if (false !== $pos = strpos($uri, '?')) { $qs = substr($uri, $pos + 1); parse_str($qs, $params); $query = array_merge($params, $query); } } $queryString = isset($components['query']) ? html_entity_decode($components['query']) : ''; parse_str($queryString, $qs); if (is_array($qs)) { $query = array_replace($qs, $query); } $uri = $components['path'] . ($queryString ? '?'.$queryString : ''); $server = array_replace($defaults, $server, array( 'REQUEST_METHOD' => strtoupper($method), 'PATH_INFO' => '', 'REQUEST_URI' => $uri, 'QUERY_STRING' => $queryString, )); return new static($query, $request, array(), $cookies, $files, $server, $content); } public function duplicate(array $query = null, array $request = null, array $attributes = null, array $cookies = null, array $files = null, array $server = null) { $dup = clone $this; if ($query !== null) { $dup->query = new ParameterBag($query); } if ($request !== null) { $dup->request = new ParameterBag($request); } if ($attributes !== null) { $dup->attributes = new ParameterBag($attributes); } if ($cookies !== null) { $dup->cookies = new ParameterBag($cookies); } if ($files !== null) { $dup->files = new FileBag($files); } if ($server !== null) { $dup->server = new ServerBag($server); $dup->headers = new HeaderBag($dup->server->getHeaders()); } $this->languages = null; $this->charsets = null; $this->acceptableContentTypes = null; $this->pathInfo = null; $this->requestUri = null; $this->baseUrl = null; $this->basePath = null; $this->method = null; $this->format = null; return $dup; } public function __clone() { $this->query = clone $this->query; $this->request = clone $this->request; $this->attributes = clone $this->attributes; $this->cookies = clone $this->cookies; $this->files = clone $this->files; $this->server = clone $this->server; $this->headers = clone $this->headers; } public function overrideGlobals() { $_GET = $this->query->all(); $_POST = $this->request->all(); $_SERVER = $this->server->all(); $_COOKIE = $this->cookies->all(); foreach ($this->headers->all() as $key => $value) { $_SERVER['HTTP_'.strtoupper(str_replace('-', '_', $key))] = implode(', ', $value); } $_REQUEST = array_merge($_GET, $_POST); } public function get($key, $default = null) { return $this->query->get($key, $this->attributes->get($key, $this->request->get($key, $default))); } public function getSession() { return $this->session; } public function hasSession() { return $this->cookies->has(session_name()); } public function setSession(Session $session) { $this->session = $session; } public function getClientIp($proxy = false) { if ($proxy) { if ($this->server->has('HTTP_CLIENT_IP')) { return $this->server->get('HTTP_CLIENT_IP'); } elseif ($this->server->has('HTTP_X_FORWARDED_FOR')) { return $this->server->get('HTTP_X_FORWARDED_FOR'); } } return $this->server->get('REMOTE_ADDR'); } public function getScriptName() { return $this->server->get('SCRIPT_NAME', $this->server->get('ORIG_SCRIPT_NAME', '')); } public function getPathInfo() { if (null === $this->pathInfo) { $this->pathInfo = $this->preparePathInfo(); } return $this->pathInfo; } public function getBasePath() { if (null === $this->basePath) { $this->basePath = $this->prepareBasePath(); } return $this->basePath; } public function getBaseUrl() { if (null === $this->baseUrl) { $this->baseUrl = $this->prepareBaseUrl(); } return $this->baseUrl; } public function getScheme() { return ($this->server->get('HTTPS') == 'on') ? 'https' : 'http'; } public function getPort() { return $this->server->get('SERVER_PORT'); } public function getHttpHost() { $host = $this->headers->get('HOST'); if (!empty($host)) { return $host; } $scheme = $this->getScheme(); $name = $this->server->get('SERVER_NAME'); $port = $this->getPort(); if (('http' == $scheme && $port == 80) || ('https' == $scheme && $port == 443)) { return $name; } return $name.':'.$port; } public function getRequestUri() { if (null === $this->requestUri) { $this->requestUri = $this->prepareRequestUri(); } return $this->requestUri; } public function getUri() { $qs = $this->getQueryString(); if (null !== $qs) { $qs = '?'.$qs; } return $this->getScheme().'://'.$this->getHttpHost().$this->getBaseUrl().$this->getPathInfo().$qs; } public function getUriForPath($path) { return $this->getScheme().'://'.$this->getHttpHost().$this->getBaseUrl().$path; } public function getQueryString() { if (!$qs = $this->server->get('QUERY_STRING')) { return null; } $parts = array(); $order = array(); foreach (explode('&', $qs) as $segment) { if (false === strpos($segment, '=')) { $parts[] = $segment; $order[] = $segment; } else { $tmp = explode('=', urldecode($segment), 2); $parts[] = urlencode($tmp[0]).'='.urlencode($tmp[1]); $order[] = $tmp[0]; } } array_multisort($order, SORT_ASC, $parts); return implode('&', $parts); } public function isSecure() { return ( (strtolower($this->server->get('HTTPS')) == 'on' || $this->server->get('HTTPS') == 1) || (strtolower($this->headers->get('SSL_HTTPS')) == 'on' || $this->headers->get('SSL_HTTPS') == 1) || (strtolower($this->headers->get('X_FORWARDED_PROTO')) == 'https') ); } public function getHost() { if ($host = $this->headers->get('X_FORWARDED_HOST')) { $elements = explode(',', $host); $host = trim($elements[count($elements) - 1]); } else { if (!$host = $this->headers->get('HOST')) { if (!$host = $this->server->get('SERVER_NAME')) { $host = $this->server->get('SERVER_ADDR', ''); } } } $elements = explode(':', $host); return trim($elements[0]); } public function setMethod($method) { $this->method = null; $this->server->set('REQUEST_METHOD', $method); } public function getMethod() { if (null === $this->method) { $this->method = strtoupper($this->server->get('REQUEST_METHOD', 'GET')); if ('POST' === $this->method) { $this->method = strtoupper($this->request->get('_method', 'POST')); } } return $this->method; } public function getMimeType($format) { if (null === static::$formats) { static::initializeFormats(); } return isset(static::$formats[$format]) ? static::$formats[$format][0] : null; } public function getFormat($mimeType) { if (null === static::$formats) { static::initializeFormats(); } foreach (static::$formats as $format => $mimeTypes) { if (in_array($mimeType, (array) $mimeTypes)) { return $format; } } return null; } public function setFormat($format, $mimeTypes) { if (null === static::$formats) { static::initializeFormats(); } static::$formats[$format] = is_array($mimeTypes) ? $mimeTypes : array($mimeTypes); } public function getRequestFormat() { if (null === $this->format) { $this->format = $this->get('_format', 'html'); } return $this->format; } public function setRequestFormat($format) { $this->format = $format; } public function isMethodSafe() { return in_array($this->getMethod(), array('GET', 'HEAD')); } public function getContent($asResource = false) { if (false === $this->content || (true === $asResource && null !== $this->content)) { throw new \LogicException('getContent() can only be called once when using the resource return type.'); } if (true === $asResource) { $this->content = false; return fopen('php://input', 'rb'); } if (null === $this->content) { $this->content = file_get_contents('php://input'); } return $this->content; } public function getETags() { return preg_split('/\s*,\s*/', $this->headers->get('if_none_match'), null, PREG_SPLIT_NO_EMPTY); } public function isNoCache() { return $this->headers->hasCacheControlDirective('no-cache') || 'no-cache' == $this->headers->get('Pragma'); } public function getPreferredLanguage(array $locales = null) { $preferredLanguages = $this->getLanguages(); if (null === $locales) { return isset($preferredLanguages[0]) ? $preferredLanguages[0] : null; } if (!$preferredLanguages) { return $locales[0]; } $preferredLanguages = array_values(array_intersect($preferredLanguages, $locales)); return isset($preferredLanguages[0]) ? $preferredLanguages[0] : $locales[0]; } public function getLanguages() { if (null !== $this->languages) { return $this->languages; } $languages = $this->splitHttpAcceptHeader($this->headers->get('Accept-Language')); $this->languages = array(); foreach ($languages as $lang) { if (strstr($lang, '-')) { $codes = explode('-', $lang); if ($codes[0] == 'i') { if (count($codes) > 1) { $lang = $codes[1]; } } else { for ($i = 0, $max = count($codes); $i < $max; $i++) { if ($i == 0) { $lang = strtolower($codes[0]); } else { $lang .= '_'.strtoupper($codes[$i]); } } } } $this->languages[] = $lang; } return $this->languages; } public function getCharsets() { if (null !== $this->charsets) { return $this->charsets; } return $this->charsets = $this->splitHttpAcceptHeader($this->headers->get('Accept-Charset')); } public function getAcceptableContentTypes() { if (null !== $this->acceptableContentTypes) { return $this->acceptableContentTypes; } return $this->acceptableContentTypes = $this->splitHttpAcceptHeader($this->headers->get('Accept')); } public function isXmlHttpRequest() { return 'XMLHttpRequest' == $this->headers->get('X-Requested-With'); } public function splitHttpAcceptHeader($header) { if (!$header) { return array(); } $values = array(); foreach (array_filter(explode(',', $header)) as $value) { if ($pos = strpos($value, ';')) { $q = (float) trim(substr($value, strpos($value, '=') + 1)); $value = trim(substr($value, 0, $pos)); } else { $q = 1; } if (0 < $q) { $values[trim($value)] = $q; } } arsort($values); return array_keys($values); } protected function prepareRequestUri() { $requestUri = ''; if ($this->headers->has('X_REWRITE_URL')) { $requestUri = $this->headers->get('X_REWRITE_URL'); } elseif ($this->server->get('IIS_WasUrlRewritten') == '1' && $this->server->get('UNENCODED_URL') != '') { $requestUri = $this->server->get('UNENCODED_URL'); } elseif ($this->server->has('REQUEST_URI')) { $requestUri = $this->server->get('REQUEST_URI'); $schemeAndHttpHost = $this->getScheme().'://'.$this->getHttpHost(); if (strpos($requestUri, $schemeAndHttpHost) === 0) { $requestUri = substr($requestUri, strlen($schemeAndHttpHost)); } } elseif ($this->server->has('ORIG_PATH_INFO')) { $requestUri = $this->server->get('ORIG_PATH_INFO'); if ($this->server->get('QUERY_STRING')) { $requestUri .= '?'.$this->server->get('QUERY_STRING'); } } return $requestUri; } protected function prepareBaseUrl() { $filename = basename($this->server->get('SCRIPT_FILENAME')); if (basename($this->server->get('SCRIPT_NAME')) === $filename) { $baseUrl = $this->server->get('SCRIPT_NAME'); } elseif (basename($this->server->get('PHP_SELF')) === $filename) { $baseUrl = $this->server->get('PHP_SELF'); } elseif (basename($this->server->get('ORIG_SCRIPT_NAME')) === $filename) { $baseUrl = $this->server->get('ORIG_SCRIPT_NAME'); } else { $path = $this->server->get('PHP_SELF', ''); $file = $this->server->get('SCRIPT_FILENAME', ''); $segs = explode('/', trim($file, '/')); $segs = array_reverse($segs); $index = 0; $last = count($segs); $baseUrl = ''; do { $seg = $segs[$index]; $baseUrl = '/'.$seg.$baseUrl; ++$index; } while (($last > $index) && (false !== ($pos = strpos($path, $baseUrl))) && (0 != $pos)); } $requestUri = $this->getRequestUri(); if ($baseUrl && 0 === strpos($requestUri, $baseUrl)) { return $baseUrl; } if ($baseUrl && 0 === strpos($requestUri, dirname($baseUrl))) { return rtrim(dirname($baseUrl), '/'); } $truncatedRequestUri = $requestUri; if (($pos = strpos($requestUri, '?')) !== false) { $truncatedRequestUri = substr($requestUri, 0, $pos); } $basename = basename($baseUrl); if (empty($basename) || !strpos($truncatedRequestUri, $basename)) { return ''; } if ((strlen($requestUri) >= strlen($baseUrl)) && ((false !== ($pos = strpos($requestUri, $baseUrl))) && ($pos !== 0))) { $baseUrl = substr($requestUri, 0, $pos + strlen($baseUrl)); } return rtrim($baseUrl, '/'); } protected function prepareBasePath() { $filename = basename($this->server->get('SCRIPT_FILENAME')); $baseUrl = $this->getBaseUrl(); if (empty($baseUrl)) { return ''; } if (basename($baseUrl) === $filename) { $basePath = dirname($baseUrl); } else { $basePath = $baseUrl; } if ('\\' === DIRECTORY_SEPARATOR) { $basePath = str_replace('\\', '/', $basePath); } return rtrim($basePath, '/'); } protected function preparePathInfo() { $baseUrl = $this->getBaseUrl(); if (null === ($requestUri = $this->getRequestUri())) { return ''; } $pathInfo = ''; if ($pos = strpos($requestUri, '?')) { $requestUri = substr($requestUri, 0, $pos); } if ((null !== $baseUrl) && (false === ($pathInfo = substr($requestUri, strlen($baseUrl))))) { return ''; } elseif (null === $baseUrl) { return $requestUri; } return (string) $pathInfo; } static protected function initializeFormats() { static::$formats = array( 'txt' => array('text/plain'), 'js' => array('application/javascript', 'application/x-javascript', 'text/javascript'), 'css' => array('text/css'), 'json' => array('application/json', 'application/x-json'), 'xml' => array('text/xml', 'application/xml', 'application/x-xml'), 'rdf' => array('application/rdf+xml'), 'atom' => array('application/atom+xml'), ); } } } namespace Symfony\Component\HttpFoundation { class ParameterBag { protected $parameters; public function __construct(array $parameters = array()) { $this->parameters = $parameters; } public function all() { return $this->parameters; } public function keys() { return array_keys($this->parameters); } public function replace(array $parameters = array()) { $this->parameters = $parameters; } public function add(array $parameters = array()) { $this->parameters = array_replace($this->parameters, $parameters); } public function get($key, $default = null) { return array_key_exists($key, $this->parameters) ? $this->parameters[$key] : $default; } public function set($key, $value) { $this->parameters[$key] = $value; } public function has($key) { return array_key_exists($key, $this->parameters); } public function remove($key) { unset($this->parameters[$key]); } public function getAlpha($key, $default = '') { return preg_replace('/[^[:alpha:]]/', '', $this->get($key, $default)); } public function getAlnum($key, $default = '') { return preg_replace('/[^[:alnum:]]/', '', $this->get($key, $default)); } public function getDigits($key, $default = '') { return preg_replace('/[^[:digit:]]/', '', $this->get($key, $default)); } public function getInt($key, $default = 0) { return (int) $this->get($key, $default); } } } namespace Symfony\Component\HttpFoundation { use Symfony\Component\HttpFoundation\File\UploadedFile; class FileBag extends ParameterBag { static private $fileKeys = array('error', 'name', 'size', 'tmp_name', 'type'); public function __construct(array $parameters = array()) { $this->replace($parameters); } public function replace(array $files = array()) { $this->parameters = array(); $this->add($files); } public function set($key, $value) { if (is_array($value) || $value instanceof UploadedFile) { parent::set($key, $this->convertFileInformation($value)); } } public function add(array $files = array()) { foreach ($files as $key => $file) { $this->set($key, $file); } } protected function convertFileInformation($file) { if ($file instanceof UploadedFile) { return $file; } $file = $this->fixPhpFilesArray($file); if (is_array($file)) { $keys = array_keys($file); sort($keys); if ($keys == self::$fileKeys) { if (UPLOAD_ERR_NO_FILE == $file['error']) { $file = null; } else { $file = new UploadedFile($file['tmp_name'], $file['name'], $file['type'], $file['size'], $file['error']); } } else { $file = array_map(array($this, 'convertFileInformation'), $file); } } return $file; } protected function fixPhpFilesArray($data) { if (!is_array($data)) { return $data; } $keys = array_keys($data); sort($keys); if (self::$fileKeys != $keys || !isset($data['name']) || !is_array($data['name'])) { return $data; } $files = $data; foreach (self::$fileKeys as $k) { unset($files[$k]); } foreach (array_keys($data['name']) as $key) { $files[$key] = $this->fixPhpFilesArray(array( 'error' => $data['error'][$key], 'name' => $data['name'][$key], 'type' => $data['type'][$key], 'tmp_name' => $data['tmp_name'][$key], 'size' => $data['size'][$key] )); } return $files; } } } namespace Symfony\Component\HttpFoundation { class ServerBag extends ParameterBag { public function getHeaders() { $headers = array(); foreach ($this->parameters as $key => $value) { if ('HTTP_' === substr($key, 0, 5)) { $headers[substr($key, 5)] = $value; } } return $headers; } } } namespace Symfony\Component\HttpFoundation { class HeaderBag { protected $headers; protected $cookies; protected $cacheControl; public function __construct(array $headers = array()) { $this->cacheControl = array(); $this->cookies = array(); $this->headers = array(); foreach ($headers as $key => $values) { $this->set($key, $values); } } public function all() { return $this->headers; } public function keys() { return array_keys($this->headers); } public function replace(array $headers = array()) { $this->headers = array(); $this->add($headers); } public function add(array $headers) { foreach ($headers as $key => $values) { $this->set($key, $values); } } public function get($key, $default = null, $first = true) { $key = strtr(strtolower($key), '_', '-'); if (!array_key_exists($key, $this->headers)) { if (null === $default) { return $first ? null : array(); } return $first ? $default : array($default); } if ($first) { return count($this->headers[$key]) ? $this->headers[$key][0] : $default; } return $this->headers[$key]; } public function set($key, $values, $replace = true) { $key = strtr(strtolower($key), '_', '-'); if (!is_array($values)) { $values = array($values); } if (true === $replace || !isset($this->headers[$key])) { $this->headers[$key] = $values; } else { $this->headers[$key] = array_merge($this->headers[$key], $values); } if ('cache-control' === $key) { $this->cacheControl = $this->parseCacheControl($values[0]); } } public function has($key) { return array_key_exists(strtr(strtolower($key), '_', '-'), $this->headers); } public function contains($key, $value) { return in_array($value, $this->get($key, null, false)); } public function remove($key) { $key = strtr(strtolower($key), '_', '-'); unset($this->headers[$key]); if ('cache-control' === $key) { $this->cacheControl = array(); } } public function setCookie(Cookie $cookie) { $this->cookies[$cookie->getName()] = $cookie; } public function removeCookie($name) { unset($this->cookies[$name]); } public function hasCookie($name) { return isset($this->cookies[$name]); } public function getCookie($name) { if (!$this->hasCookie($name)) { throw new \InvalidArgumentException(sprintf('There is no cookie with name "%s".', $name)); } return $this->cookies[$name]; } public function getCookies() { return $this->cookies; } public function getDate($key, \DateTime $default = null) { if (null === $value = $this->get($key)) { return $default; } if (false === $date = \DateTime::createFromFormat(DATE_RFC2822, $value)) { throw new \RuntimeException(sprintf('The %s HTTP header is not parseable (%s).', $key, $value)); } return $date; } public function addCacheControlDirective($key, $value = true) { $this->cacheControl[$key] = $value; $this->set('Cache-Control', $this->getCacheControlHeader()); } public function hasCacheControlDirective($key) { return array_key_exists($key, $this->cacheControl); } public function getCacheControlDirective($key) { return array_key_exists($key, $this->cacheControl) ? $this->cacheControl[$key] : null; } public function removeCacheControlDirective($key) { unset($this->cacheControl[$key]); $this->set('Cache-Control', $this->getCacheControlHeader()); } protected function getCacheControlHeader() { $parts = array(); ksort($this->cacheControl); foreach ($this->cacheControl as $key => $value) { if (true === $value) { $parts[] = $key; } else { if (preg_match('#[^a-zA-Z0-9._-]#', $value)) { $value = '"'.$value.'"'; } $parts[] = "$key=$value"; } } return implode(', ', $parts); } protected function parseCacheControl($header) { $cacheControl = array(); preg_match_all('#([a-zA-Z][a-zA-Z_-]*)\s*(?:=(?:"([^"]*)"|([^ \t",;]*)))?#', $header, $matches, PREG_SET_ORDER); foreach ($matches as $match) { $cacheControl[strtolower($match[1])] = isset($match[2]) && $match[2] ? $match[2] : (isset($match[3]) ? $match[3] : true); } return $cacheControl; } } } namespace Symfony\Component\HttpKernel { use Symfony\Component\HttpKernel\Controller\ControllerResolverInterface; use Symfony\Component\HttpKernel\Exception\NotFoundHttpException; use Symfony\Component\HttpKernel\Event\FilterControllerEvent; use Symfony\Component\HttpKernel\Event\FilterResponseEvent; use Symfony\Component\HttpKernel\Event\GetResponseEvent; use Symfony\Component\HttpKernel\Event\GetResponseForControllerResultEvent; use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent; use Symfony\Component\HttpFoundation\Request; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\EventDispatcher\EventDispatcherInterface; class HttpKernel implements HttpKernelInterface { private $dispatcher; private $resolver; public function __construct(EventDispatcherInterface $dispatcher, ControllerResolverInterface $resolver) { $this->dispatcher = $dispatcher; $this->resolver = $resolver; } public function handle(Request $request, $type = HttpKernelInterface::MASTER_REQUEST, $catch = true) { try { return $this->handleRaw($request, $type); } catch (\Exception $e) { if (false === $catch) { throw $e; } return $this->handleException($e, $request, $type); } } private function handleRaw(Request $request, $type = self::MASTER_REQUEST) { $event = new GetResponseEvent($this, $request, $type); $this->dispatcher->dispatch(Events::onCoreRequest, $event); if ($event->hasResponse()) { return $this->filterResponse($event->getResponse(), $request, $type); } if (false === $controller = $this->resolver->getController($request)) { throw new NotFoundHttpException(sprintf('Unable to find the controller for path "%s". Maybe you forgot to add the matching route in your routing configuration?', $request->getPathInfo())); } $event = new FilterControllerEvent($this, $controller, $request, $type); $this->dispatcher->dispatch(Events::onCoreController, $event); $controller = $event->getController(); $arguments = $this->resolver->getArguments($request, $controller); $response = call_user_func_array($controller, $arguments); if (!$response instanceof Response) { $event = new GetResponseForControllerResultEvent($this, $request, $type, $response); $this->dispatcher->dispatch(Events::onCoreView, $event); if ($event->hasResponse()) { $response = $event->getResponse(); } if (!$response instanceof Response) { $msg = sprintf('The controller must return a response (%s given).', $this->varToString($response)); if (null === $response) { $msg .= ' Did you forget to add a return statement somewhere in your controller?'; } throw new \LogicException($msg); } } return $this->filterResponse($response, $request, $type); } private function filterResponse(Response $response, Request $request, $type) { $event = new FilterResponseEvent($this, $request, $type, $response); $this->dispatcher->dispatch(Events::onCoreResponse, $event); return $event->getResponse(); } private function handleException(\Exception $e, $request, $type) { $event = new GetResponseForExceptionEvent($this, $request, $type, $e); $this->dispatcher->dispatch(Events::onCoreException, $event); if (!$event->hasResponse()) { throw $e; } try { return $this->filterResponse($event->getResponse(), $request, $type); } catch (\Exception $e) { return $event->getResponse(); } } private function varToString($var) { if (is_object($var)) { return sprintf('[object](%s)', get_class($var)); } if (is_array($var)) { $a = array(); foreach ($var as $k => $v) { $a[] = sprintf('%s => %s', $k, $this->varToString($v)); } return sprintf("[array](%s)", implode(', ', $a)); } if (is_resource($var)) { return '[resource]'; } if (null === $var) { return 'null'; } return str_replace("\n", '', var_export((string) $var, true)); } } } namespace Symfony\Component\HttpKernel\Controller { use Symfony\Component\HttpKernel\Log\LoggerInterface; use Symfony\Component\HttpFoundation\Request; class ControllerResolver implements ControllerResolverInterface { private $logger; public function __construct(LoggerInterface $logger = null) { $this->logger = $logger; } public function getController(Request $request) { if (!$controller = $request->attributes->get('_controller')) { if (null !== $this->logger) { $this->logger->err('Unable to look for the controller as the "_controller" parameter is missing'); } return false; } if ($controller instanceof \Closure) { return $controller; } list($controller, $method) = $this->createController($controller); if (!method_exists($controller, $method)) { throw new \InvalidArgumentException(sprintf('Method "%s::%s" does not exist.', get_class($controller), $method)); } if (null !== $this->logger) { $this->logger->info(sprintf('Using controller "%s::%s"', get_class($controller), $method)); } return array($controller, $method); } public function getArguments(Request $request, $controller) { $attributes = $request->attributes->all(); if (is_array($controller)) { $r = new \ReflectionMethod($controller[0], $controller[1]); $repr = sprintf('%s::%s()', get_class($controller[0]), $controller[1]); } else { $r = new \ReflectionFunction($controller); $repr = 'Closure'; } $arguments = array(); foreach ($r->getParameters() as $param) { if (array_key_exists($param->getName(), $attributes)) { $arguments[] = $attributes[$param->getName()]; } elseif ($param->isDefaultValueAvailable()) { $arguments[] = $param->getDefaultValue(); } else { throw new \RuntimeException(sprintf('Controller "%s" requires that you provide a value for the "$%s" argument (because there is no default value or because there is a non optional argument after this one).', $repr, $param->getName())); } } return $arguments; } protected function createController($controller) { if (false === strpos($controller, '::')) { throw new \InvalidArgumentException(sprintf('Unable to find controller "%s".', $controller)); } list($class, $method) = explode('::', $controller); if (!class_exists($class)) { throw new \InvalidArgumentException(sprintf('Class "%s" does not exist.', $class)); } return array(new $class(), $method); } } } namespace Symfony\Component\EventDispatcher { class Event { private $propagationStopped = false; public function isPropagationStopped() { return $this->propagationStopped; } public function stopPropagation() { $this->propagationStopped = true; } } } namespace Symfony\Component\HttpKernel\Event { use Symfony\Component\HttpKernel\HttpKernelInterface; use Symfony\Component\HttpFoundation\Request; use Symfony\Component\EventDispatcher\Event; class KernelEvent extends Event { private $kernel; private $request; private $requestType; public function __construct(HttpKernelInterface $kernel, Request $request, $requestType) { $this->kernel = $kernel; $this->request = $request; $this->requestType = $requestType; } public function getKernel() { return $this->kernel; } public function getRequest() { return $this->request; } public function getRequestType() { return $this->requestType; } }} namespace Symfony\Component\HttpKernel\Event { use Symfony\Component\HttpKernel\HttpKernelInterface; use Symfony\Component\HttpFoundation\Request; use Symfony\Component\HttpFoundation\Response; class GetResponseEvent extends KernelEvent { private $response; public function getResponse() { return $this->response; } public function setResponse(Response $response) { $this->response = $response; $this->stopPropagation(); } public function hasResponse() { return null !== $this->response; } }} namespace Symfony\Component\Routing\Matcher { use Symfony\Component\Routing\Matcher\Exception\MethodNotAllowedException; use Symfony\Component\Routing\Matcher\Exception\NotFoundException; use Symfony\Component\Routing\Route; use Symfony\Component\Routing\RouteCollection; class UrlMatcher implements UrlMatcherInterface { protected $defaults; protected $context; private $routes; public function __construct(RouteCollection $routes, array $context = array(), array $defaults = array()) { $this->routes = $routes; $this->context = $context; $this->defaults = $defaults; } public function setContext(array $context = array()) { $this->context = $context; } public function match($pathinfo) { $allow = array(); foreach ($this->routes->all() as $name => $route) { $compiledRoute = $route->compile(); if ('' !== $compiledRoute->getStaticPrefix() && 0 !== strpos($pathinfo, $compiledRoute->getStaticPrefix())) { continue; } if (!preg_match($compiledRoute->getRegex(), $pathinfo, $matches)) { continue; } if (isset($this->context['method']) && $route->getRequirement('_method') && ($req = explode('|', $route->getRequirement('_method'))) && !in_array(strtolower($this->context['method']), array_map('strtolower', $req))) { $allow = array_merge($allow, $req); continue; } return array_merge($this->mergeDefaults($matches, $route->getDefaults()), array('_route' => $name)); } throw 0 < count($allow) ? new MethodNotAllowedException(array_unique(array_map('strtolower', $allow))) : new NotFoundException(); } protected function mergeDefaults($params, $defaults) { $parameters = array_merge($this->defaults, $defaults); foreach ($params as $key => $value) { if (!is_int($key)) { $parameters[$key] = urldecode($value); } } return $parameters; } } } namespace Symfony\Component\Routing { class RouteCompiler implements RouteCompilerInterface { protected $options; protected $route; protected $variables; protected $firstOptional; protected $segments; protected $tokens; protected $staticPrefix; protected $regex; public function compile(Route $route) { $this->route = $route; $this->firstOptional = 0; $this->segments = array(); $this->variables = array(); $this->tokens = array(); $this->staticPrefix = ''; $this->regex = ''; $this->options = $this->getOptions(); $this->preCompile(); $this->tokenize(); foreach ($this->tokens as $token) { call_user_func_array(array($this, 'compileFor'.ucfirst(array_shift($token))), $token); } $this->postCompile(); $separator = ''; if (count($this->tokens)) { $lastToken = $this->tokens[count($this->tokens) - 1]; $separator = 'separator' == $lastToken[0] ? $lastToken[2] : ''; } $this->regex = "#^".implode("", $this->segments)."".preg_quote($separator, '#')."$#x"; $tokens = array(); foreach ($this->tokens as $i => $token) { if ($i + 1 === count($this->tokens) && 'separator' === $token[0]) { $tokens[] = array('text', $token[2], '', null); } elseif ('separator' !== $token[0]) { $tokens[] = $token; } } $tokens = array_reverse($tokens); return new CompiledRoute($this->route, $this->staticPrefix, $this->regex, $tokens, $this->variables); } protected function preCompile() { } protected function postCompile() { for ($i = $this->firstOptional, $max = count($this->segments); $i < $max; $i++) { $this->segments[$i] = (0 == $i ? '/?' : '').str_repeat(' ', $i - $this->firstOptional).'(?:'.$this->segments[$i]; $this->segments[] = str_repeat(' ', $max - $i - 1).')?'; } $this->staticPrefix = ''; foreach ($this->tokens as $token) { switch ($token[0]) { case 'separator': break; case 'text': $this->staticPrefix .= $token[1].$token[2]; break; default: break 2; } } } private function tokenize() { $this->tokens = array(); $buffer = $this->route->getPattern(); $afterASeparator = false; $currentSeparator = ''; while (strlen($buffer)) { if (false !== $this->tokenizeBufferBefore($buffer, $tokens, $afterASeparator, $currentSeparator)) { $this->customToken = true; } else if ($afterASeparator && preg_match('#^\{([\w\d_]+)\}#', $buffer, $match)) { $this->tokens[] = array('variable', $currentSeparator, $match[0], $match[1]); $currentSeparator = ''; $buffer = substr($buffer, strlen($match[0])); $afterASeparator = false; } else if ($afterASeparator && preg_match('#^('.$this->options['text_regex'].')(?:'.$this->options['segment_separators_regex'].'|$)#', $buffer, $match)) { $this->tokens[] = array('text', $currentSeparator, $match[1], null); $currentSeparator = ''; $buffer = substr($buffer, strlen($match[1])); $afterASeparator = false; } else if (!$afterASeparator && preg_match('#^'.$this->options['segment_separators_regex'].'#', $buffer, $match)) { $this->tokens[] = array('separator', $currentSeparator, $match[0], null); $currentSeparator = $match[0]; $buffer = substr($buffer, strlen($match[0])); $afterASeparator = true; } else if (false !== $this->tokenizeBufferAfter($buffer, $tokens, $afterASeparator, $currentSeparator)) { $this->customToken = true; } else { throw new \InvalidArgumentException(sprintf('Unable to parse "%s" route near "%s".', $this->route->getPattern(), $buffer)); } } } protected function tokenizeBufferBefore(&$buffer, &$tokens, &$afterASeparator, &$currentSeparator) { return false; } protected function tokenizeBufferAfter(&$buffer, &$tokens, &$afterASeparator, &$currentSeparator) { return false; } protected function compileForText($separator, $text) { $this->firstOptional = count($this->segments) + 1; $this->segments[] = preg_quote($separator, '#').preg_quote($text, '#'); } protected function compileForVariable($separator, $name, $variable) { if (null === $requirement = $this->route->getRequirement($variable)) { $requirement = $this->options['variable_content_regex']; } $this->segments[] = preg_quote($separator, '#').'(?P<'.$variable.'>'.$requirement.')'; $this->variables[$variable] = $name; if (null === $this->route->getDefault($variable)) { $this->firstOptional = count($this->segments); } } protected function compileForSeparator($separator, $regexSeparator) { } private function getOptions() { $options = $this->route->getOptions(); $quoter = function ($a) { return preg_quote($a, '#'); }; $options['segment_separators_regex'] = '(?:'.implode('|', array_map($quoter, $options['segment_separators'])).')'; $options['variable_content_regex'] = '[^'.implode('', array_map($quoter, $options['segment_separators'])).']+?'; return $options; } } } namespace Symfony\Component\Routing { class CompiledRoute { private $route; private $variables; private $tokens; private $staticPrefix; private $regex; public function __construct(Route $route, $staticPrefix, $regex, array $tokens, array $variables) { $this->route = $route; $this->staticPrefix = $staticPrefix; $this->regex = $regex; $this->tokens = $tokens; $this->variables = $variables; } public function getRoute() { return $this->route; } public function getStaticPrefix() { return $this->staticPrefix; } public function getRegex() { return $this->regex; } public function getTokens() { return $this->tokens; } public function getVariables() { return $this->variables; } public function getPattern() { return $this->route->getPattern(); } public function getOptions() { return $this->route->getOptions(); } public function getDefaults() { return $this->route->getDefaults(); } public function getRequirements() { return $this->route->getRequirements(); } } } namespace Symfony\Component\HttpKernel\Event { use Symfony\Component\HttpKernel\HttpKernelInterface; use Symfony\Component\HttpFoundation\Request; class FilterControllerEvent extends KernelEvent { private $controller; public function __construct(HttpKernelInterface $kernel, $controller, Request $request, $requestType) { parent::__construct($kernel, $request, $requestType); $this->setController($controller); } public function getController() { return $this->controller; } public function setController($controller) { if (!is_callable($controller)) { throw new \LogicException(sprintf('The controller must be a callable (%s given).', $this->varToString($controller))); } $this->controller = $controller; } private function varToString($var) { if (is_object($var)) { return sprintf('[object](%s)', get_class($var)); } if (is_array($var)) { $a = array(); foreach ($var as $k => $v) { $a[] = sprintf('%s => %s', $k, $this->varToString($v)); } return sprintf("[array](%s)", implode(', ', $a)); } if (is_resource($var)) { return '[resource]'; } return str_replace("\n", '', var_export((string) $var, true)); } }} namespace Symfony\Component\Routing\Matcher { interface RedirectableUrlMatcherInterface { function redirect($pathinfo, $route); } } namespace Silex { use Symfony\Component\HttpFoundation\RedirectResponse; use Symfony\Component\Routing\Matcher\UrlMatcher; use Symfony\Component\Routing\Matcher\RedirectableUrlMatcherInterface; use Symfony\Component\Routing\Matcher\Exception\NotFoundException; class RedirectableUrlMatcher extends UrlMatcher implements RedirectableUrlMatcherInterface { private $trailingSlashTest = false; public function match($pathinfo) { try { $parameters = parent::match($pathinfo); } catch (NotFoundException $e) { if ('/' === substr($pathinfo, -1)) { throw $e; } $this->trailingSlashTest = true; return $this->match($pathinfo.'/'); } if ($this->trailingSlashTest) { $this->trailingSlashTest = false; return $this->redirect($pathinfo, null); } return $parameters; } public function redirect($pathinfo, $route) { return array( '_controller' => function ($url) { return new RedirectResponse($url, 301); }, 'url' => $this->context['base_url'].$pathinfo, ); } } } namespace { class Twig_Environment { const VERSION = '1.0.0-RC2'; protected $charset; protected $loader; protected $debug; protected $autoReload; protected $cache; protected $lexer; protected $parser; protected $compiler; protected $baseTemplateClass; protected $extensions; protected $parsers; protected $visitors; protected $filters; protected $tests; protected $functions; protected $globals; protected $runtimeInitialized; protected $loadedTemplates; protected $strictVariables; protected $unaryOperators; protected $binaryOperators; protected $templateClassPrefix = '__TwigTemplate_'; protected $functionCallbacks; protected $filterCallbacks; public function __construct(Twig_LoaderInterface $loader = null, $options = array()) { if (null !== $loader) { $this->setLoader($loader); } $options = array_merge(array( 'debug' => false, 'charset' => 'UTF-8', 'base_template_class' => 'Twig_Template', 'strict_variables' => false, 'autoescape' => true, 'cache' => false, 'auto_reload' => null, 'optimizations' => -1, ), $options); $this->debug = (bool) $options['debug']; $this->charset = $options['charset']; $this->baseTemplateClass = $options['base_template_class']; $this->autoReload = null === $options['auto_reload'] ? $this->debug : (bool) $options['auto_reload']; $this->extensions = array( 'core' => new Twig_Extension_Core(), 'escaper' => new Twig_Extension_Escaper((bool) $options['autoescape']), 'optimizer' => new Twig_Extension_Optimizer($options['optimizations']), ); $this->strictVariables = (bool) $options['strict_variables']; $this->runtimeInitialized = false; $this->setCache($options['cache']); $this->functionCallbacks = array(); $this->filterCallbacks = array(); } public function getBaseTemplateClass() { return $this->baseTemplateClass; } public function setBaseTemplateClass($class) { $this->baseTemplateClass = $class; } public function enableDebug() { $this->debug = true; } public function disableDebug() { $this->debug = false; } public function isDebug() { return $this->debug; } public function enableAutoReload() { $this->autoReload = true; } public function disableAutoReload() { $this->autoReload = false; } public function isAutoReload() { return $this->autoReload; } public function enableStrictVariables() { $this->strictVariables = true; } public function disableStrictVariables() { $this->strictVariables = false; } public function isStrictVariables() { return $this->strictVariables; } public function getCache() { return $this->cache; } public function setCache($cache) { $this->cache = $cache ? $cache : false; } public function getCacheFilename($name) { if (false === $this->cache) { return false; } $class = substr($this->getTemplateClass($name), strlen($this->templateClassPrefix)); return $this->getCache().'/'.substr($class, 0, 2).'/'.substr($class, 2, 2).'/'.substr($class, 4).'.php'; } public function getTemplateClass($name) { return $this->templateClassPrefix.md5($this->loader->getCacheKey($name)); } public function getTemplateClassPrefix() { return $this->templateClassPrefix; } public function render($name, array $context = array()) { return $this->loadTemplate($name)->render($context); } public function loadTemplate($name) { $cls = $this->getTemplateClass($name); if (isset($this->loadedTemplates[$cls])) { return $this->loadedTemplates[$cls]; } if (!class_exists($cls, false)) { if (false === $cache = $this->getCacheFilename($name)) { eval('?>'.$this->compileSource($this->loader->getSource($name), $name)); } else { if (!file_exists($cache) || ($this->isAutoReload() && !$this->loader->isFresh($name, filemtime($cache)))) { $this->writeCacheFile($cache, $this->compileSource($this->loader->getSource($name), $name)); } } } if (!$this->runtimeInitialized) { $this->initRuntime(); } return $this->loadedTemplates[$cls] = new $cls($this); } public function clearTemplateCache() { $this->loadedTemplates = array(); } public function clearCacheFiles() { if (false === $this->cache) { return; } foreach (new RecursiveIteratorIterator(new RecursiveDirectoryIterator($this->cache), RecursiveIteratorIterator::LEAVES_ONLY) as $file) { if ($file->isFile()) { @unlink($file->getPathname()); } } } public function getLexer() { if (null === $this->lexer) { $this->lexer = new Twig_Lexer($this); } return $this->lexer; } public function setLexer(Twig_LexerInterface $lexer) { $this->lexer = $lexer; } public function tokenize($source, $name = null) { return $this->getLexer()->tokenize($source, $name); } public function getParser() { if (null === $this->parser) { $this->parser = new Twig_Parser($this); } return $this->parser; } public function setParser(Twig_ParserInterface $parser) { $this->parser = $parser; } public function parse(Twig_TokenStream $tokens) { return $this->getParser()->parse($tokens); } public function getCompiler() { if (null === $this->compiler) { $this->compiler = new Twig_Compiler($this); } return $this->compiler; } public function setCompiler(Twig_CompilerInterface $compiler) { $this->compiler = $compiler; } public function compile(Twig_NodeInterface $node) { return $this->getCompiler()->compile($node)->getSource(); } public function compileSource($source, $name = null) { return $this->compile($this->parse($this->tokenize($source, $name))); } public function setLoader(Twig_LoaderInterface $loader) { $this->loader = $loader; } public function getLoader() { return $this->loader; } public function setCharset($charset) { $this->charset = $charset; } public function getCharset() { return $this->charset; } public function initRuntime() { $this->runtimeInitialized = true; foreach ($this->getExtensions() as $extension) { $extension->initRuntime($this); } } public function hasExtension($name) { return isset($this->extensions[$name]); } public function getExtension($name) { if (!isset($this->extensions[$name])) { throw new Twig_Error_Runtime(sprintf('The "%s" extension is not enabled.', $name)); } return $this->extensions[$name]; } public function addExtension(Twig_ExtensionInterface $extension) { $this->extensions[$extension->getName()] = $extension; } public function removeExtension($name) { unset($this->extensions[$name]); } public function setExtensions(array $extensions) { foreach ($extensions as $extension) { $this->addExtension($extension); } } public function getExtensions() { return $this->extensions; } public function addTokenParser(Twig_TokenParserInterface $parser) { if (null === $this->parsers) { $this->getTokenParsers(); } $this->parsers->addTokenParser($parser); } public function getTokenParsers() { if (null === $this->parsers) { $this->parsers = new Twig_TokenParserBroker; foreach ($this->getExtensions() as $extension) { $parsers = $extension->getTokenParsers(); foreach($parsers as $parser) { if ($parser instanceof Twig_TokenParserInterface) { $this->parsers->addTokenParser($parser); } else if ($parser instanceof Twig_TokenParserBrokerInterface) { $this->parsers->addTokenParserBroker($parser); } else { throw new Twig_Error_Runtime('getTokenParsers() must return an array of Twig_TokenParserInterface or Twig_TokenParserBrokerInterface instances'); } } } } return $this->parsers; } public function addNodeVisitor(Twig_NodeVisitorInterface $visitor) { if (null === $this->visitors) { $this->getNodeVisitors(); } $this->visitors[] = $visitor; } public function getNodeVisitors() { if (null === $this->visitors) { $this->visitors = array(); foreach ($this->getExtensions() as $extension) { $this->visitors = array_merge($this->visitors, $extension->getNodeVisitors()); } } return $this->visitors; } public function addFilter($name, Twig_FilterInterface $filter) { if (null === $this->filters) { $this->loadFilters(); } $this->filters[$name] = $filter; } public function getFilter($name) { if (null === $this->filters) { $this->loadFilters(); } if (isset($this->filters[$name])) { return $this->filters[$name]; } foreach ($this->filterCallbacks as $callback) { if (false !== $filter = call_user_func($callback, $name)) { return $filter; } } return false; } public function registerUndefinedFilterCallback($callable) { $this->filterCallbacks[] = $callable; } protected function loadFilters() { $this->filters = array(); foreach ($this->getExtensions() as $extension) { $this->filters = array_merge($this->filters, $extension->getFilters()); } } public function addTest($name, Twig_TestInterface $test) { if (null === $this->tests) { $this->getTests(); } $this->tests[$name] = $test; } public function getTests() { if (null === $this->tests) { $this->tests = array(); foreach ($this->getExtensions() as $extension) { $this->tests = array_merge($this->tests, $extension->getTests()); } } return $this->tests; } public function addFunction($name, Twig_FunctionInterface $function) { if (null === $this->functions) { $this->loadFunctions(); } $this->functions[$name] = $function; } public function getFunction($name) { if (null === $this->functions) { $this->loadFunctions(); } if (isset($this->functions[$name])) { return $this->functions[$name]; } foreach ($this->functionCallbacks as $callback) { if (false !== $function = call_user_func($callback, $name)) { return $function; } } return false; } public function registerUndefinedFunctionCallback($callable) { $this->functionCallbacks[] = $callable; } protected function loadFunctions() { $this->functions = array(); foreach ($this->getExtensions() as $extension) { $this->functions = array_merge($this->functions, $extension->getFunctions()); } } public function addGlobal($name, $value) { if (null === $this->globals) { $this->getGlobals(); } $this->globals[$name] = $value; } public function getGlobals() { if (null === $this->globals) { $this->globals = array(); foreach ($this->getExtensions() as $extension) { $this->globals = array_merge($this->globals, $extension->getGlobals()); } } return $this->globals; } public function getUnaryOperators() { if (null === $this->unaryOperators) { $this->initOperators(); } return $this->unaryOperators; } public function getBinaryOperators() { if (null === $this->binaryOperators) { $this->initOperators(); } return $this->binaryOperators; } protected function initOperators() { $this->unaryOperators = array(); $this->binaryOperators = array(); foreach ($this->getExtensions() as $extension) { $operators = $extension->getOperators(); if (!$operators) { continue; } if (2 !== count($operators)) { throw new InvalidArgumentException(sprintf('"%s::getOperators()" does not return a valid operators array.', get_class($extension))); } $this->unaryOperators = array_merge($this->unaryOperators, $operators[0]); $this->binaryOperators = array_merge($this->binaryOperators, $operators[1]); } } protected function writeCacheFile($file, $content) { if (!is_dir(dirname($file))) { mkdir(dirname($file), 0777, true); } $tmpFile = tempnam(dirname($file), basename($file)); if (false !== @file_put_contents($tmpFile, $content)) { if (@rename($tmpFile, $file) || (@copy($tmpFile, $file) && unlink($tmpFile))) { chmod($file, 0644); return; } } throw new Twig_Error_Runtime(sprintf('Failed to write cache file "%s".', $file)); } } } namespace { class Twig_Markup { protected $content; public function __construct($content) { $this->content = (string) $content; } public function __toString() { return $this->content; } } } namespace { abstract class Twig_Extension implements Twig_ExtensionInterface { public function initRuntime(Twig_Environment $environment) { } public function getTokenParsers() { return array(); } public function getNodeVisitors() { return array(); } public function getFilters() { return array(); } public function getTests() { return array(); } public function getFunctions() { return array(); } public function getOperators() { return array(); } public function getGlobals() { return array(); } } } namespace { class Twig_Extension_Core extends Twig_Extension { public function getTokenParsers() { return array( new Twig_TokenParser_For(), new Twig_TokenParser_If(), new Twig_TokenParser_Extends(), new Twig_TokenParser_Include(), new Twig_TokenParser_Block(), new Twig_TokenParser_Filter(), new Twig_TokenParser_Macro(), new Twig_TokenParser_Import(), new Twig_TokenParser_From(), new Twig_TokenParser_Set(), new Twig_TokenParser_Spaceless(), ); } public function getFilters() { $filters = array( 'date' => new Twig_Filter_Function('twig_date_format_filter'), 'format' => new Twig_Filter_Function('sprintf'), 'replace' => new Twig_Filter_Function('twig_strtr'), 'url_encode' => new Twig_Filter_Function('twig_urlencode_filter'), 'json_encode' => new Twig_Filter_Function('json_encode'), 'title' => new Twig_Filter_Function('twig_title_string_filter', array('needs_environment' => true)), 'capitalize' => new Twig_Filter_Function('twig_capitalize_string_filter', array('needs_environment' => true)), 'upper' => new Twig_Filter_Function('strtoupper'), 'lower' => new Twig_Filter_Function('strtolower'), 'striptags' => new Twig_Filter_Function('strip_tags'), 'join' => new Twig_Filter_Function('twig_join_filter'), 'reverse' => new Twig_Filter_Function('twig_reverse_filter'), 'length' => new Twig_Filter_Function('twig_length_filter', array('needs_environment' => true)), 'sort' => new Twig_Filter_Function('twig_sort_filter'), 'merge' => new Twig_Filter_Function('twig_array_merge'), 'default' => new Twig_Filter_Function('twig_default_filter'), 'keys' => new Twig_Filter_Function('twig_get_array_keys_filter'), 'escape' => new Twig_Filter_Function('twig_escape_filter', array('needs_environment' => true, 'is_safe_callback' => 'twig_escape_filter_is_safe')), 'e' => new Twig_Filter_Function('twig_escape_filter', array('needs_environment' => true, 'is_safe_callback' => 'twig_escape_filter_is_safe')), ); if (function_exists('mb_get_info')) { $filters['upper'] = new Twig_Filter_Function('twig_upper_filter', array('needs_environment' => true)); $filters['lower'] = new Twig_Filter_Function('twig_lower_filter', array('needs_environment' => true)); } return $filters; } public function getFunctions() { return array( 'range' => new Twig_Function_Method($this, 'getRange'), 'constant' => new Twig_Function_Method($this, 'getConstant'), 'cycle' => new Twig_Function_Method($this, 'getCycle'), ); } public function getRange($start, $end, $step = 1) { return range($start, $end, $step); } public function getConstant($value) { return constant($value); } public function getCycle($values, $i) { if (!is_array($values) && !$values instanceof ArrayAccess) { return $values; } return $values[$i % count($values)]; } public function getTests() { return array( 'even' => new Twig_Test_Function('twig_test_even'), 'odd' => new Twig_Test_Function('twig_test_odd'), 'defined' => new Twig_Test_Function('twig_test_defined'), 'sameas' => new Twig_Test_Function('twig_test_sameas'), 'none' => new Twig_Test_Function('twig_test_none'), 'divisibleby' => new Twig_Test_Function('twig_test_divisibleby'), 'constant' => new Twig_Test_Function('twig_test_constant'), 'empty' => new Twig_Test_Function('twig_test_empty'), ); } public function getOperators() { return array( array( 'not' => array('precedence' => 50, 'class' => 'Twig_Node_Expression_Unary_Not'), '-' => array('precedence' => 50, 'class' => 'Twig_Node_Expression_Unary_Neg'), '+' => array('precedence' => 50, 'class' => 'Twig_Node_Expression_Unary_Pos'), ), array( 'or' => array('precedence' => 10, 'class' => 'Twig_Node_Expression_Binary_Or', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), 'and' => array('precedence' => 15, 'class' => 'Twig_Node_Expression_Binary_And', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '==' => array('precedence' => 20, 'class' => 'Twig_Node_Expression_Binary_Equal', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '!=' => array('precedence' => 20, 'class' => 'Twig_Node_Expression_Binary_NotEqual', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '<' => array('precedence' => 20, 'class' => 'Twig_Node_Expression_Binary_Less', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '>' => array('precedence' => 20, 'class' => 'Twig_Node_Expression_Binary_Greater', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '>=' => array('precedence' => 20, 'class' => 'Twig_Node_Expression_Binary_GreaterEqual', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '<=' => array('precedence' => 20, 'class' => 'Twig_Node_Expression_Binary_LessEqual', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), 'not in' => array('precedence' => 20, 'class' => 'Twig_Node_Expression_Binary_NotIn', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), 'in' => array('precedence' => 20, 'class' => 'Twig_Node_Expression_Binary_In', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '+' => array('precedence' => 30, 'class' => 'Twig_Node_Expression_Binary_Add', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '-' => array('precedence' => 30, 'class' => 'Twig_Node_Expression_Binary_Sub', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '~' => array('precedence' => 40, 'class' => 'Twig_Node_Expression_Binary_Concat', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '*' => array('precedence' => 60, 'class' => 'Twig_Node_Expression_Binary_Mul', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '/' => array('precedence' => 60, 'class' => 'Twig_Node_Expression_Binary_Div', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '//' => array('precedence' => 60, 'class' => 'Twig_Node_Expression_Binary_FloorDiv', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '%' => array('precedence' => 60, 'class' => 'Twig_Node_Expression_Binary_Mod', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), 'is' => array('precedence' => 100, 'callable' => array($this, 'parseTestExpression'), 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), 'is not' => array('precedence' => 100, 'callable' => array($this, 'parseNotTestExpression'), 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '..' => array('precedence' => 110, 'class' => 'Twig_Node_Expression_Binary_Range', 'associativity' => Twig_ExpressionParser::OPERATOR_LEFT), '**' => array('precedence' => 200, 'class' => 'Twig_Node_Expression_Binary_Power', 'associativity' => Twig_ExpressionParser::OPERATOR_RIGHT), ), ); } public function parseNotTestExpression(Twig_Parser $parser, $node) { return new Twig_Node_Expression_Unary_Not($this->parseTestExpression($parser, $node), $parser->getCurrentToken()->getLine()); } public function parseTestExpression(Twig_Parser $parser, $node) { $stream = $parser->getStream(); $name = $stream->expect(Twig_Token::NAME_TYPE); $arguments = null; if ($stream->test(Twig_Token::PUNCTUATION_TYPE, '(')) { $arguments = $parser->getExpressionParser()->parseArguments(); } return new Twig_Node_Expression_Test($node, $name->getValue(), $arguments, $parser->getCurrentToken()->getLine()); } public function getName() { return 'core'; } } function twig_date_format_filter($date, $format = 'F j, Y H:i') { if (!$date instanceof DateTime) { $date = new DateTime((ctype_digit($date) ? '@' : '').$date); } return $date->format($format); } function twig_urlencode_filter($url, $raw = false) { if ($raw) { return rawurlencode($url); } return urlencode($url); } function twig_array_merge($arr1, $arr2) { if (!is_array($arr1) || !is_array($arr2)) { throw new Twig_Error_Runtime('The merge filter only work with arrays or hashes.'); } return array_merge($arr1, $arr2); } function twig_join_filter($value, $glue = '') { return implode($glue, (array) $value); } function twig_default_filter($value, $default = '') { return twig_test_empty($value) ? $default : $value; } function twig_get_array_keys_filter($array) { if (is_object($array) && $array instanceof Traversable) { return array_keys(iterator_to_array($array)); } if (!is_array($array)) { return array(); } return array_keys($array); } function twig_reverse_filter($array) { if (is_object($array) && $array instanceof Traversable) { return array_reverse(iterator_to_array($array)); } if (!is_array($array)) { return array(); } return array_reverse($array); } function twig_sort_filter($array) { asort($array); return $array; } function twig_in_filter($value, $compare) { if (is_array($compare)) { return in_array($value, $compare); } elseif (is_string($compare)) { return false !== strpos($compare, (string) $value); } elseif (is_object($compare) && $compare instanceof Traversable) { return in_array($value, iterator_to_array($compare, false)); } return false; } function twig_strtr($pattern, $replacements) { return str_replace(array_keys($replacements), array_values($replacements), $pattern); } function twig_escape_filter(Twig_Environment $env, $string, $type = 'html', $charset = null) { if (is_object($string) && $string instanceof Twig_Markup) { return $string; } if (!is_string($string) && !(is_object($string) && method_exists($string, '__toString'))) { return $string; } if (null === $charset) { $charset = $env->getCharset(); } switch ($type) { case 'js': if ('UTF-8' != $charset) { $string = _twig_convert_encoding($string, 'UTF-8', $charset); } if (null === $string = preg_replace_callback('#[^\p{L}\p{N} ]#u', '_twig_escape_js_callback', $string)) { throw new Twig_Error_Runtime('The string to escape is not a valid UTF-8 string.'); } if ('UTF-8' != $charset) { $string = _twig_convert_encoding($string, $charset, 'UTF-8'); } return $string; case 'html': return htmlspecialchars($string, ENT_QUOTES, $charset); default: throw new Twig_Error_Runtime(sprintf('Invalid escape type "%s".', $type)); } } function twig_escape_filter_is_safe(Twig_Node $filterArgs) { foreach ($filterArgs as $arg) { if ($arg instanceof Twig_Node_Expression_Constant) { return array($arg->getAttribute('value')); } else { return array(); } break; } return array('html'); } if (function_exists('iconv')) { function _twig_convert_encoding($string, $to, $from) { return iconv($from, $to, $string); } } elseif (function_exists('mb_convert_encoding')) { function _twig_convert_encoding($string, $to, $from) { return mb_convert_encoding($string, $to, $from); } } else { function _twig_convert_encoding($string, $to, $from) { throw new Twig_Error_Runtime('No suitable convert encoding function (use UTF-8 as your encoding or install the iconv or mbstring extension).'); } } function _twig_escape_js_callback($matches) { $char = $matches[0]; if (!isset($char[1])) { return '\\x'.substr('00'.bin2hex($char), -2); } $char = _twig_convert_encoding($char, 'UTF-16BE', 'UTF-8'); return '\\u'.substr('0000'.bin2hex($char), -4); } if (function_exists('mb_get_info')) { function twig_length_filter(Twig_Environment $env, $thing) { return is_scalar($thing) ? mb_strlen($thing, $env->getCharset()) : count($thing); } function twig_upper_filter(Twig_Environment $env, $string) { if (null !== ($charset = $env->getCharset())) { return mb_strtoupper($string, $charset); } return strtoupper($string); } function twig_lower_filter(Twig_Environment $env, $string) { if (null !== ($charset = $env->getCharset())) { return mb_strtolower($string, $charset); } return strtolower($string); } function twig_title_string_filter(Twig_Environment $env, $string) { if (null !== ($charset = $env->getCharset())) { return mb_convert_case($string, MB_CASE_TITLE, $charset); } return ucwords(strtolower($string)); } function twig_capitalize_string_filter(Twig_Environment $env, $string) { if (null !== ($charset = $env->getCharset())) { return mb_strtoupper(mb_substr($string, 0, 1, $charset), $charset). mb_strtolower(mb_substr($string, 1, mb_strlen($string, $charset), $charset), $charset); } return ucfirst(strtolower($string)); } } else { function twig_length_filter(Twig_Environment $env, $thing) { return is_scalar($thing) ? strlen($thing) : count($thing); } function twig_title_string_filter(Twig_Environment $env, $string) { return ucwords(strtolower($string)); } function twig_capitalize_string_filter(Twig_Environment $env, $string) { return ucfirst(strtolower($string)); } } function twig_ensure_traversable($seq) { if (is_array($seq) || (is_object($seq) && $seq instanceof Traversable)) { return $seq; } else { return array(); } } function twig_test_sameas($value, $test) { return $value === $test; } function twig_test_none($value) { return null === $value; } function twig_test_divisibleby($value, $num) { return 0 == $value % $num; } function twig_test_even($value) { return $value % 2 == 0; } function twig_test_odd($value) { return $value % 2 == 1; } function twig_test_constant($value, $constant) { return constant($constant) === $value; } function twig_test_defined($name, $context) { return array_key_exists($name, $context); } function twig_test_empty($value) { return null === $value || false === $value || '' === (string) $value; } } namespace { class Twig_Extension_Escaper extends Twig_Extension { protected $autoescape; public function __construct($autoescape = true) { $this->autoescape = $autoescape; } public function getTokenParsers() { return array(new Twig_TokenParser_AutoEscape()); } public function getNodeVisitors() { return array(new Twig_NodeVisitor_Escaper()); } public function getFilters() { return array( 'raw' => new Twig_Filter_Function('twig_raw_filter', array('is_safe' => array('all'))), ); } public function isGlobal() { return $this->autoescape; } public function getName() { return 'escaper'; } } function twig_raw_filter($string) { return $string; } } namespace { class Twig_Extension_Optimizer extends Twig_Extension { protected $optimizers; public function __construct($optimizers = -1) { $this->optimizers = $optimizers; } public function getNodeVisitors() { return array(new Twig_NodeVisitor_Optimizer($this->optimizers)); } public function getName() { return 'optimizer'; } } } namespace Symfony\Bridge\Twig\Extension { use Symfony\Component\Routing\Generator\UrlGeneratorInterface; class RoutingExtension extends \Twig_Extension { private $generator; public function __construct(UrlGeneratorInterface $generator) { $this->generator = $generator; } public function getFunctions() { return array( 'url' => new \Twig_Function_Method($this, 'getUrl'), 'path' => new \Twig_Function_Method($this, 'getPath'), ); } public function getPath($name, array $parameters = array()) { return $this->generator->generate($name, $parameters, false); } public function getUrl($name, array $parameters = array()) { return $this->generator->generate($name, $parameters, true); } public function getName() { return 'routing'; } } } namespace Symfony\Component\Routing\Generator { use Symfony\Component\Routing\Route; use Symfony\Component\Routing\RouteCollection; class UrlGenerator implements UrlGeneratorInterface { protected $defaults; protected $context; private $routes; private $cache; public function __construct(RouteCollection $routes, array $context = array(), array $defaults = array()) { $this->routes = $routes; $this->context = $context; $this->defaults = $defaults; $this->cache = array(); } public function setContext(array $context = array()) { $this->context = $context; } public function generate($name, array $parameters = array(), $absolute = false) { if (null === $route = $this->routes->get($name)) { throw new \InvalidArgumentException(sprintf('Route "%s" does not exist.', $name)); } if (!isset($this->cache[$name])) { $this->cache[$name] = $route->compile(); } return $this->doGenerate($this->cache[$name]->getVariables(), $route->getDefaults(), $route->getRequirements(), $this->cache[$name]->getTokens(), $parameters, $name, $absolute); } protected function doGenerate($variables, $defaults, $requirements, $tokens, $parameters, $name, $absolute) { $defaults = array_merge($this->defaults, $defaults); $tparams = array_merge($defaults, $parameters); if ($diff = array_diff_key($variables, $tparams)) { throw new \InvalidArgumentException(sprintf('The "%s" route has some missing mandatory parameters (%s).', $name, implode(', ', $diff))); } $url = ''; $optional = true; foreach ($tokens as $token) { if ('variable' === $token[0]) { if (false === $optional || !isset($defaults[$token[3]]) || (isset($parameters[$token[3]]) && $parameters[$token[3]] != $defaults[$token[3]])) { if (isset($requirements[$token[3]]) && !preg_match('#^'.$requirements[$token[3]].'$#', $tparams[$token[3]])) { throw new \InvalidArgumentException(sprintf('Parameter "%s" for route "%s" must match "%s" ("%s" given).', $token[3], $name, $requirements[$token[3]], $tparams[$token[3]])); } $url = $token[1].str_replace('%2F', '/', urlencode($tparams[$token[3]])).$url; $optional = false; } } elseif ('text' === $token[0]) { $url = $token[1].$token[2].$url; $optional = false; } else { if ($segment = call_user_func_array(array($this, 'generateFor'.ucfirst(array_shift($token))), array_merge(array($optional, $tparams), $token))) { $url = $segment.$url; $optional = false; } } } if (!$url) { $url = '/'; } if ($extra = array_diff_key($parameters, $variables, $defaults)) { $url .= '?'.http_build_query($extra); } $url = (isset($this->context['base_url']) ? $this->context['base_url'] : '').$url; if ($absolute && isset($this->context['host'])) { $isSecure = (isset($this->context['is_secure']) && $this->context['is_secure']); $port = isset($this->context['port']) ? $this->context['port'] : 80; $urlBeginning = 'http'.($isSecure ? 's' : '').'://'.$this->context['host']; if (($isSecure && $port != 443) || (!$isSecure && $port != 80)) { $urlBeginning .= ':'.$port; } $url = $urlBeginning.$url; } return $url; } } } namespace Sismo { class Sismo { const VERSION = '0.99'; const FORCE_BUILD = 1; const LOCAL_BUILD = 2; const SILENT_BUILD = 4; private $storage; private $builder=array(); private $projects = array(); public function __construct(Storage $storage, array $builder) { $this->storage = $storage; $this->builder = $builder; } public function build(Project $project, $revision = null, $flags = 0, $callback = null) { if ($project->isBuilding() && Sismo::FORCE_BUILD !== ($flags & Sismo::FORCE_BUILD)) { return; } $this->builder[$project->getBuilderType()]->init($project, $callback); list($sha, $author, $date, $message) = $this->builder[$project->getBuilderType()]->prepare($revision, Sismo::LOCAL_BUILD !== ($flags & Sismo::LOCAL_BUILD)); $commit = $this->storage->getCommit($project, $sha); if ($commit && $commit->isBuilt() && Sismo::FORCE_BUILD !== ($flags & Sismo::FORCE_BUILD)) { return; } $commit = $this->storage->initCommit($project, $sha, $author, \DateTime::createFromFormat('Y-m-d H:i:s O', $date), $message); $process = $this->builder[$project->getBuilderType()]->build(); if ($process->getExitCode() > 0) { $commit->setStatusCode('failed'); $commit->setOutput(sprintf("\033[31mBuild failed\033[0m\n\n\033[33mOutput\033[0m\n%s\n\n\033[33m Error\033[0m%s", $process->getOutput(), $process->getErrorOutput())); } else { $commit->setStatusCode('success'); $commit->setOutput($process->getOutput()); } var_dump($process->getExitCode()); $this->storage->updateCommit($commit); if (Sismo::SILENT_BUILD !== ($flags & Sismo::SILENT_BUILD)) { foreach ($project->getNotifiers() as $notifier) { $notifier->notify($commit); } } } public function hasProject($slug) { return isset($this->projects[$slug]); } public function getProject($slug) { if (!isset($this->projects[$slug])) { throw new \InvalidArgumentException(sprintf('Project "%s" does not exist.', $slug)); } return $this->projects[$slug]; } public function addProject(Project $project) { $this->storage->updateProject($project); $this->projects[$project->getSlug()] = $project; } public function getProjects() { return $this->projects; } } } namespace Sismo { class Storage { private $db; public function __construct(\SQLite3 $db) { $this->db = $db; } public function getCommit(Project $project, $sha) { $stmt = $this->db->prepare('SELECT slug, sha, author, date, build_date, message, status, output FROM `commit` WHERE slug = :slug AND sha = :sha'); $stmt->bindValue(':slug', $project->getSlug(), SQLITE3_TEXT); $stmt->bindValue(':sha', $sha, SQLITE3_TEXT); if (false !== $result = $stmt->execute()) { if (false !== $result = $result->fetchArray(\SQLITE3_ASSOC)) { return $this->createCommit($project, $result); } } return false; } public function initCommit(Project $project, $sha, $author, \DateTime $date, $message) { $stmt = $this->db->prepare('INSERT OR REPLACE INTO `commit` (slug, sha, author, date, message, status, output, build_date) VALUES (:slug, :sha, :author, :date, :message, :status, :output, :build_date)'); $stmt->bindValue(':slug', $project->getSlug(), SQLITE3_TEXT); $stmt->bindValue(':sha', $sha, SQLITE3_TEXT); $stmt->bindValue(':author', $author, SQLITE3_TEXT); $stmt->bindValue(':date', $date->format('Y-m-d H:i:s'), SQLITE3_TEXT); $stmt->bindValue(':message', $message, SQLITE3_TEXT); $stmt->bindValue(':status', 'building', SQLITE3_TEXT); $stmt->bindValue(':output', '', SQLITE3_TEXT); $stmt->bindValue(':build_date', '', SQLITE3_TEXT); if (false === $result = $stmt->execute()) { throw new \RuntimeException(sprintf('Unable to save commit "%s" from project "%s".', $sha, $project->getName())); } $commit = new Commit($project, $sha); $commit->setAuthor($author); $commit->setMessage($message); $commit->setDate($date); return $commit; } public function updateProject(Project $project) { $stmt = $this->db->prepare('INSERT OR REPLACE INTO project (slug, name, repository, branch, command, url_pattern) VALUES (:slug, :name, :repository, :branch, :command, :url_pattern)'); $stmt->bindValue(':slug', $project->getSlug(), SQLITE3_TEXT); $stmt->bindValue(':name', $project->getName(), SQLITE3_TEXT); $stmt->bindValue(':repository', $project->getRepository(), SQLITE3_TEXT); $stmt->bindValue(':branch', $project->getBranch(), SQLITE3_TEXT); $stmt->bindValue(':command', $project->getCommand(), SQLITE3_TEXT); $stmt->bindValue(':url_pattern', $project->getUrlPattern(), SQLITE3_TEXT); if (false === $stmt->execute()) { throw new \RuntimeException(sprintf('Unable to save project "%s".', $project->getName())); } $stmt = $this->db->prepare('SELECT sha, author, date, build_date, message, status, output FROM `commit` WHERE slug = :slug ORDER BY build_date DESC LIMIT 100'); $stmt->bindValue(':slug', $project->getSlug(), SQLITE3_TEXT); if (false === $results = $stmt->execute()) { throw new \RuntimeException(sprintf('Unable to get latest commit for project "%s".', $project->getName())); } $commits = array(); while ($result = $results->fetchArray(\SQLITE3_ASSOC)) { $commits[] = $this->createCommit($project, $result); } $project->setCommits($commits); $stmt = $this->db->prepare('SELECT COUNT(*) AS count FROM `commit` WHERE slug = :slug AND status = "building"'); $stmt->bindValue(':slug', $project->getSlug(), SQLITE3_TEXT); $building = false; if (false !== $result = $stmt->execute()) { if (false !== $result = $result->fetchArray(\SQLITE3_ASSOC)) { if ($result['count'] > 0) { $building = true; } } } $project->setBuilding($building); } public function updateCommit(Commit $commit) { $stmt = $this->db->prepare('UPDATE `commit` SET status = :status, output = :output, build_date = CURRENT_TIMESTAMP WHERE slug = :slug AND sha = :sha'); $stmt->bindValue(':slug', $commit->getProject()->getSlug(), SQLITE3_TEXT); $stmt->bindValue(':sha', $commit->getSha(), SQLITE3_TEXT); $stmt->bindValue(':status', $commit->getStatusCode(), SQLITE3_TEXT); $stmt->bindValue(':output', $commit->getOutput(), SQLITE3_TEXT); if (false === $stmt->execute()) { throw new \RuntimeException(sprintf('Unable to save build "%s@%s".', $commit->getProject()->getName(), $commit->getSha())); } } private function createCommit($project, $result) { $commit = new Commit($project, $result['sha']); $commit->setAuthor($result['author']); $commit->setMessage($result['message']); $commit->setDate(\DateTime::createFromFormat('Y-m-d H:i:s', $result['date'])); if ($result['build_date']) { $commit->setBuildDate(\DateTime::createFromFormat('Y-m-d H:i:s', $result['build_date'])); } $commit->setStatusCode($result['status']); $commit->setOutput($result['output']); return $commit; } } } namespace Sismo { interface Builder { public function __construct($buildDir, $scmPath, array $scmCmds); public function init(Project $project, $callback = null); public function build(); public function prepare($revision, $sync); } } namespace Sismo { class Project { private $name; private $slug; private $repository; private $branch = 'master'; private $command = 'phpunit'; private $urlPattern; private $commits = array(); private $building = false; private $notifiers = array(); public function __construct($name, $repository = null, $notifiers = array(), $slug = null) { $this->name = $name; $this->slug = $slug ?: $this->slugify($name); if (null !== $repository) { $this->setRepository($repository); } if (!is_array($notifiers)) { $notifiers = array($notifiers); } foreach ($notifiers as $notifier) { $this->addNotifier($notifier); } } public function __toString() { return $this->name; } public function setBuilding($bool) { $this->building = (Boolean) $bool; } public function isBuilding() { return $this->building; } public function addNotifier(Notifier $notifier) { $this->notifiers[] = $notifier; } public function getNotifiers() { return $this->notifiers; } public function setBranch($branch) { $this->branch = $branch; } public function getBranch() { return $this->branch; } public function setCommits(array $commits = array()) { $this->commits = $commits; } public function getCommits() { return $this->commits; } public function getLatestCommit() { return $this->commits ? $this->commits[0] : null; } public function getStatusCode() { return !$this->commits ? 'no_build' : $this->commits[0]->getStatusCode(); } public function getStatus() { return !$this->commits ? 'not built yet' : $this->commits[0]->getStatus(); } public function getCCStatus() { if (!$this->commits || !$this->commits[0]->isBuilt()) { return 'Unknown'; } return $this->commits[0]->isSuccessful() ? 'Success' : 'Failure'; } public function getCCActivity() { return $this->commits && $this->commits[0]->isBuilding() ? 'Building' : 'Sleeping'; } public function getName() { return $this->name; } public function getShortName() { list($name, ) = explode('(', $this->name); return trim($name); } public function getSubName() { if (false !== $pos = strpos($this->name, '(')) { return trim(substr($this->name, $pos + 1, -1)); } return ''; } public function getSlug() { return $this->slug; } public function getRepository() { return $this->repository; } public function setRepository($url) { if (false !== strpos($url, '@')) { list($url, $branch) = explode('@', $url); $this->branch = $branch; } $this->repository = $url; } public function getCommand() { return $this->command; } public function setCommand($command) { $this->command = $command; } public function getUrlPattern() { return $this->urlPattern; } public function setUrlPattern($pattern) { $this->urlPattern = $pattern; } private function slugify($text) { $text = preg_replace('#[^\\pL\d]+#u', '-', $text); $text = trim($text, '-'); if (function_exists('iconv')) { $text = iconv('utf-8', 'us-ascii//TRANSLIT', $text); } $text = strtolower($text); $text = preg_replace('#[^-\w]+#', '', $text); if (empty($text)) { throw new \RuntimeException(sprintf('Unable to compute a slug for "%s". Define it explicitly.', $text)); } return $text; } } } namespace Sismo { use Symfony\Component\Process\Process; class GithubProject extends Project { private $builderType = 'git'; public function getBuilderType() { return $this->builderType; } public function setRepository($url) { parent::setRepository($url); if (file_exists($this->getRepository())) { $process = new Process('git remote -v', $this->getRepository()); $process->run(); foreach (explode("\n", $process->getOutput()) as $line) { $parts = explode("\t", $line); if ('origin' == $parts[0] && preg_match('#(?:\:|/)(.*?)/(.*?)\.git#', $parts[1], $matches)) { $this->setUrlPattern(sprintf('https://github.com/%s/%s/commit/%%commit%%', $matches[1], $matches[2])); break; } } } elseif (preg_match('#^[a-z0-9]+/[a-z0-9]+$#i', $this->getRepository())) { $this->setUrlPattern(sprintf('https://github.com/%s/commit/%%commit%%', $this->getRepository())); parent::setRepository(sprintf('https://github.com/%s.git', $this->getRepository())); } else { throw new \InvalidArgumentException(sprintf('URL "%s" does not look like a Github repository.', $this->getRepository())); } } } } namespace Sismo { abstract class Notifier { abstract public function notify(Commit $commit); protected function format($format, Commit $commit) { return strtr($format, $this->getPlaceholders($commit)); } protected function getPlaceholders(Commit $commit) { $project = $commit->getProject(); return array( '%slug%' => $project->getSlug(), '%name%' => $project->getName(), '%status%' => $commit->getStatus(), '%status_code%' => $commit->getStatusCode(), '%STATUS%' => strtoupper($commit->getStatus()), '%sha%' => $commit->getSha(), '%short_sha%' => $commit->getShortSha(), '%author%' => $commit->getAuthor(), '%message%' => $commit->getMessage(), ); } } } namespace Sismo { class GrowlNotifier extends Notifier { private $application; private $address; private $notifications; private $password; private $port; private $registered; private $format; public function __construct($password, $application = 'sismo', $address = 'localhost', $format = "[%STATUS%]\n%message%\n%author%", $port = 9887) { $this->application = $application; $this->address = $address; $this->password = $password; $this->format = $format; $this->port = $port; $this->registered = false; $this->notifications = array( array('name' => 'Success', 'enabled' => true), array('name' => 'Fail', 'enabled' => true), ); } public function notify(Commit $commit) { $this->register(); return $this->doNotify($commit->isSuccessful() ? 'Success' : 'Fail', $commit->getProject()->getName(), $this->format($this->format, $commit)); } private function register() { if (true === $this->registered) { return; } $this->registered = true; $data = ''; $defaults = ''; $nbDefaults = 0; foreach ($this->notifications as $i => $notification) { $data .= pack('n', strlen($notification['name'])).$notification['name']; if ($notification['enabled']) { $defaults .= pack('c', $i); ++$nbDefaults; } } $data = pack('c2nc2', 1, 0, strlen($this->application), count($this->notifications), $nbDefaults).$this->application.$data.$defaults; $this->send($data); } private function doNotify($name, $title, $message) { $data = pack('c2n5', 1, 1, 0, strlen($name), strlen($title), strlen($message), strlen($this->application)).$name.$title.$message.$this->application; $this->send($data); } private function send($data) { $data .= pack('H32', md5($data.$this->password)); $fp = fsockopen('udp://'.$this->address, $this->port); fwrite($fp, $data); fclose($fp); } } } namespace Sismo { use Symfony\Component\Process\Process; class DBusNotifier extends Notifier { public function __construct($format = "[%STATUS%]\n%message%\n%author%", $port = 9887) { $this->format = $format; } public function notify(Commit $commit) { $process = new Process(sprintf('notify-send "%s" "%s"', $commit->getProject()->getName(), $this->format($this->format, $commit))); $process->setTimeout(2); $process->run(); if ($process->getExitCode() <= 0) { return; } $process = new Process(sprintf('dbus-send --print-reply --dest=org.freedesktop.Notifications /org/freedesktop/Notifications org.freedesktop.Notifications.Notify string:"sismo" int32:0 string:"" string:"%s" string:"%s" array:string:"" dict:string:"" int32:-1', $commit->getProject()->getName(), $this->format($this->format, $commit))); $process->setTimeout(2); $process->run(); if ($process->getExitCode() <= 0) { return; } } } } namespace Symfony\Component\Process { class Process { private $commandline; private $cwd; private $env; private $stdin; private $timeout; private $options; private $exitcode; private $status; private $stdout; private $stderr; public function __construct($commandline, $cwd = null, array $env = array(), $stdin = null, $timeout = 60, array $options = array()) { if (!function_exists('proc_open')) { throw new \RuntimeException('The Process class relies on proc_open, which is not available on your PHP installation.'); } $this->commandline = $commandline; $this->cwd = null === $cwd ? getcwd() : $cwd; $this->env = array(); foreach ($env as $key => $value) { $this->env[(binary) $key] = (binary) $value; } $this->stdin = $stdin; $this->timeout = $timeout; $this->options = array_merge($options, array('suppress_errors' => true, 'binary_pipes' => true)); } public function run($callback = null) { $this->stdout = ''; $this->stderr = ''; $that = $this; $callback = function ($type, $line) use ($that, $callback) { if ('out' == $type) { $that->addOutput($line); } else { $that->addErrorOutput($line); } if (null !== $callback) { call_user_func($callback, $type, $line); } }; $descriptors = array(array('pipe', 'r'), array('pipe', 'w'), array('pipe', 'w')); $process = proc_open($this->commandline, $descriptors, $pipes, $this->cwd, $this->env, $this->options); stream_set_blocking($pipes[1], false); stream_set_blocking($pipes[2], false); if (!is_resource($process)) { throw new \RuntimeException('Unable to launch a new process.'); } if (null !== $this->stdin) { fwrite($pipes[0], (binary) $this->stdin); } fclose($pipes[0]); while (true) { $r = $pipes; $w = null; $e = null; $n = @stream_select($r, $w, $e, $this->timeout); if (false === $n) { break; } elseif ($n === 0) { proc_terminate($process); throw new \RuntimeException('The process timed out.'); } elseif ($n > 0) { $called = false; while (true) { $c = false; if ($line = (binary) fgets($pipes[1], 1024)) { $called = $c = true; call_user_func($callback, 'out', $line); } if ($line = fgets($pipes[2], 1024)) { $called = $c = true; call_user_func($callback, 'err', $line); } if (!$c) { break; } } if (!$called) { break; } } } $this->status = proc_get_status($process); proc_close($process); if ($this->status['signaled']) { throw new \RuntimeException(sprintf('The process stopped because of a "%s" signal.', $this->status['stopsig'])); } return $this->exitcode = $this->status['exitcode']; } public function getOutput() { return $this->stdout; } public function getErrorOutput() { return $this->stderr; } public function getExitCode() { return $this->exitcode; } public function isSuccessful() { return 0 == $this->exitcode; } public function hasBeenSignaled() { return $this->status['signaled']; } public function getTermSignal() { return $this->status['termsig']; } public function hasBeenStopped() { return $this->status['stopped']; } public function getStopSignal() { return $this->status['stopsig']; } public function addOutput($line) { $this->stdout .= $line; } public function addErrorOutput($line) { $this->stderr .= $line; } public function getCommandLine() { return $this->commandline; } public function setCommandLine($commandline) { $this->commandline = $commandline; } public function getTimeout() { return $this->timeout; } public function setTimeout($timeout) { $this->timeout = $timeout; } public function getWorkingDirectory() { return $this->cwd; } public function setWorkingDirectory($cwd) { $this->cwd = $cwd; } public function getEnv() { return $this->env; } public function setEnv(array $env) { $this->env = $env; } public function getStdin() { return $this->stdin; } public function setStdin($stdin) { $this->stdin = $stdin; } public function getOptions() { return $this->options; } public function setOptions(array $options) { $this->options = $options; } } } namespace Sismo { class Commit { private $project; private $sha; private $message; private $author; private $date; private $build; private $output; private $buildDate; private $status = 'building'; private $statuses = array('building' => 'building', 'success' => 'succeeded', 'failed' => 'failed'); public function __construct(Project $project, $sha) { $this->project = $project; $this->sha = $sha; } public function __toString() { return sprintf('%s@%s', $this->project, $this->getShortSha()); } public function isBuilding() { return 'building' === $this->status; } public function isBuilt() { return in_array($this->status, array('success', 'failed')); } public function isSuccessful() { return 'success' === $this->status; } public function setStatusCode($status) { if (!in_array($status, array('building', 'success', 'failed'))) { throw new \InvalidArgumentException(sprintf('Invalid status code "%s".', $status)); } $this->status = $status; } public function getStatusCode() { return $this->status; } public function getStatus() { return $this->statuses[$this->status]; } public function setOutput($output) { $this->output = $output; } public function getOutput() { return $this->output; } public function getDecoratedOutput() { return AnsiEscapeSequencesConverter::convertToHtml($this->output); } public function getMessage() { return $this->message; } public function setMessage($message) { $this->message = $message; } public function getSha() { return $this->sha; } public function getShortSha() { return substr($this->sha, 0, 6); } public function getProject() { return $this->project; } public function getAuthor() { return $this->author; } public function setAuthor($author) { $this->author = $author; } public function getDate() { return $this->date; } public function setDate(\DateTime $date) { $this->date = $date; } public function getBuildDate() { return $this->buildDate; } public function setBuildDate(\DateTime $date) { $this->buildDate = $date; } } } namespace Sismo { class AnsiEscapeSequencesConverter { static public function convertToHtml($text) { $text = preg_replace('#\033\[(K|s|u|2J|2K|\d+(A|B|C|D|E|F|G|J|K|S|T)|\d+;\d+(H|f))#', '', $text); return preg_replace_callback("#\033\[(.+?)m(?:\033\[(?:.+?)m)*(.+?)\033\[0m#s", function ($matches) { $options = explode(';', $matches[1]); $text = $matches[2]; $classes = array(); $colors = array('black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white'); foreach ($options as $option) { if ($option >= 30 && $option < 40) { $classes[] = sprintf('ansi_color_fg_%s', $colors[$option - 30]); } elseif ($option >= 40 && $option < 50) { $classes[] = sprintf('ansi_color_bg_%s', $colors[$option - 40]); } } if (in_array(4, $options)) { $classes[] = 'underlined'; } if (in_array(1, $options)) { $text = sprintf('<strong>%s</strong>', $text); } if ($classes) { return sprintf('<span class="%s">%s</span>', implode(' ', $classes), $text); } return $text; }, $text); } } } namespace { abstract class Twig_Template implements Twig_TemplateInterface { static protected $cache = array(); protected $env; protected $blocks; public function __construct(Twig_Environment $env) { $this->env = $env; $this->blocks = array(); } public function getTemplateName() { return null; } public function getEnvironment() { return $this->env; } public function getParent(array $context) { return false; } public function displayParentBlock($name, array $context, array $blocks = array()) { if (false !== $parent = $this->getParent($context)) { $parent->displayBlock($name, $context, $blocks); } else { throw new Twig_Error_Runtime('This template has no parent', -1, $this->getTemplateName()); } } public function displayBlock($name, array $context, array $blocks = array()) { if (isset($blocks[$name])) { $b = $blocks; unset($b[$name]); call_user_func($blocks[$name], $context, $b); } elseif (isset($this->blocks[$name])) { call_user_func($this->blocks[$name], $context, $blocks); } elseif (false !== $parent = $this->getParent($context)) { $parent->displayBlock($name, $context, array_merge($this->blocks, $blocks)); } } public function renderParentBlock($name, array $context, array $blocks = array()) { ob_start(); $this->displayParentBlock($name, $context, $blocks); return new Twig_Markup(ob_get_clean()); } public function renderBlock($name, array $context, array $blocks = array()) { ob_start(); $this->displayBlock($name, $context, $blocks); return new Twig_Markup(ob_get_clean()); } public function hasBlock($name) { return isset($this->blocks[$name]); } public function getBlockNames() { return array_keys($this->blocks); } public function render(array $context) { ob_start(); try { $this->display($context); } catch (Exception $e) { $count = 100; while (ob_get_level() && --$count) { ob_end_clean(); } throw $e; } return ob_get_clean(); } protected function getContext($context, $item, $line = -1) { if (!array_key_exists($item, $context)) { throw new Twig_Error_Runtime(sprintf('Variable "%s" does not exist', $item), $line, $this->getTemplateName()); } return $context[$item]; } protected function getAttribute($object, $item, array $arguments = array(), $type = Twig_TemplateInterface::ANY_CALL, $noStrictCheck = false, $line = -1) { if (Twig_TemplateInterface::METHOD_CALL !== $type) { if ((is_array($object) || is_object($object) && $object instanceof ArrayAccess) && isset($object[$item])) { return $object[$item]; } if (Twig_TemplateInterface::ARRAY_CALL === $type) { if (!$this->env->isStrictVariables() || $noStrictCheck) { return null; } if (is_object($object)) { throw new Twig_Error_Runtime(sprintf('Key "%s" in object (with ArrayAccess) of type "%s" does not exist', $item, get_class($object)), $line, $this->getTemplateName()); } else { throw new Twig_Error_Runtime(sprintf('Key "%s" for array with keys "%s" does not exist', $item, implode(', ', array_keys($object))), $line, $this->getTemplateName()); } } } if (!is_object($object)) { if (!$this->env->isStrictVariables() || $noStrictCheck) { return null; } throw new Twig_Error_Runtime(sprintf('Item "%s" for "%s" does not exist', $item, $object), $line, $this->getTemplateName()); } $class = get_class($object); if (!isset(self::$cache[$class])) { $r = new ReflectionClass($class); self::$cache[$class] = array('methods' => array(), 'properties' => array()); foreach ($r->getMethods(ReflectionMethod::IS_PUBLIC) as $method) { self::$cache[$class]['methods'][strtolower($method->getName())] = true; } foreach ($r->getProperties(ReflectionProperty::IS_PUBLIC) as $property) { self::$cache[$class]['properties'][$property->getName()] = true; } } if (Twig_TemplateInterface::METHOD_CALL !== $type) { if (isset(self::$cache[$class]['properties'][$item]) || isset($object->$item)) { if ($this->env->hasExtension('sandbox')) { $this->env->getExtension('sandbox')->checkPropertyAllowed($object, $item); } return $object->$item; } } $lcItem = strtolower($item); if (isset(self::$cache[$class]['methods'][$lcItem])) { $method = $item; } elseif (isset(self::$cache[$class]['methods']['get'.$lcItem])) { $method = 'get'.$item; } elseif (isset(self::$cache[$class]['methods']['is'.$lcItem])) { $method = 'is'.$item; } elseif (isset(self::$cache[$class]['methods']['__call'])) { $method = $item; } else { if (!$this->env->isStrictVariables() || $noStrictCheck) { return null; } throw new Twig_Error_Runtime(sprintf('Method "%s" for object "%s" does not exist', $item, get_class($object)), $line, $this->getTemplateName()); } if ($this->env->hasExtension('sandbox')) { $this->env->getExtension('sandbox')->checkMethodAllowed($object, $method); } $ret = call_user_func_array(array($object, $method), $arguments); if ($object instanceof Twig_TemplateInterface) { return new Twig_Markup($ret); } return $ret; } } } namespace Symfony\Component\HttpKernel\Event { use Symfony\Component\HttpKernel\HttpKernelInterface; use Symfony\Component\HttpFoundation\Request; class GetResponseForControllerResultEvent extends GetResponseEvent { private $controllerResult; public function __construct(HttpKernelInterface $kernel, Request $request, $requestType, $controllerResult) { parent::__construct($kernel, $request, $requestType); $this->controllerResult = $controllerResult; } public function getControllerResult() { return $this->controllerResult; } }} namespace Symfony\Component\HttpKernel\Event { use Symfony\Component\HttpKernel\HttpKernelInterface; use Symfony\Component\HttpFoundation\Request; class GetResponseForExceptionEvent extends GetResponseEvent { private $exception; public function __construct(HttpKernelInterface $kernel, Request $request, $requestType, \Exception $e) { parent::__construct($kernel, $request, $requestType); $this->setException($e); } public function getException() { return $this->exception; } public function setException(\Exception $exception) { $this->exception = $exception; } }} namespace Silex { use Symfony\Component\HttpKernel\HttpKernelInterface; use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent; use Symfony\Component\HttpFoundation\Request; class GetResponseForErrorEvent extends GetResponseForExceptionEvent { public function setStringResponse($response) { $converter = new StringResponseConverter(); $this->setResponse($converter->convert($response)); } } } namespace Silex { use Symfony\Component\HttpFoundation\Response; class StringResponseConverter { public function convert($response) { if (!$response instanceof Response) { return new Response((string) $response); } return $response; } } } namespace Symfony\Component\HttpFoundation { class Response { public $headers; protected $content; protected $version; protected $statusCode; protected $statusText; protected $charset; static public $statusTexts = array( 100 => 'Continue', 101 => 'Switching Protocols', 200 => 'OK', 201 => 'Created', 202 => 'Accepted', 203 => 'Non-Authoritative Information', 204 => 'No Content', 205 => 'Reset Content', 206 => 'Partial Content', 300 => 'Multiple Choices', 301 => 'Moved Permanently', 302 => 'Found', 303 => 'See Other', 304 => 'Not Modified', 305 => 'Use Proxy', 307 => 'Temporary Redirect', 400 => 'Bad Request', 401 => 'Unauthorized', 402 => 'Payment Required', 403 => 'Forbidden', 404 => 'Not Found', 405 => 'Method Not Allowed', 406 => 'Not Acceptable', 407 => 'Proxy Authentication Required', 408 => 'Request Timeout', 409 => 'Conflict', 410 => 'Gone', 411 => 'Length Required', 412 => 'Precondition Failed', 413 => 'Request Entity Too Large', 414 => 'Request-URI Too Long', 415 => 'Unsupported Media Type', 416 => 'Requested Range Not Satisfiable', 417 => 'Expectation Failed', 418 => 'I\'m a teapot', 500 => 'Internal Server Error', 501 => 'Not Implemented', 502 => 'Bad Gateway', 503 => 'Service Unavailable', 504 => 'Gateway Timeout', 505 => 'HTTP Version Not Supported', ); public function __construct($content = '', $status = 200, $headers = array()) { $this->setContent($content); $this->setStatusCode($status); $this->setProtocolVersion('1.0'); $this->headers = new ResponseHeaderBag($headers); } public function __toString() { $content = ''; if (!$this->headers->has('Content-Type')) { $this->headers->set('Content-Type', 'text/html; charset='.(null === $this->charset ? 'UTF-8' : $this->charset)); } $content .= sprintf('HTTP/%s %s %s', $this->version, $this->statusCode, $this->statusText)."\n"; foreach ($this->headers->all() as $name => $values) { foreach ($values as $value) { $content .= "$name: $value\n"; } } $content .= "\n".$this->getContent(); return $content; } public function __clone() { $this->headers = clone $this->headers; } public function sendHeaders() { if (!$this->headers->has('Content-Type')) { $this->headers->set('Content-Type', 'text/html; charset='.(null === $this->charset ? 'UTF-8' : $this->charset)); } header(sprintf('HTTP/%s %s %s', $this->version, $this->statusCode, $this->statusText)); foreach ($this->headers->all() as $name => $values) { foreach ($values as $value) { header($name.': '.$value); } } foreach ($this->headers->getCookies() as $cookie) { setcookie($cookie->getName(), $cookie->getValue(), $cookie->getExpire(), $cookie->getPath(), $cookie->getDomain(), $cookie->isSecure(), $cookie->isHttpOnly()); } } public function sendContent() { echo $this->content; } public function send() { $this->sendHeaders(); $this->sendContent(); } public function setContent($content) { $this->content = $content; } public function getContent() { return $this->content; } public function setProtocolVersion($version) { $this->version = $version; } public function getProtocolVersion() { return $this->version; } public function setStatusCode($code, $text = null) { $this->statusCode = (int) $code; if ($this->isInvalid()) { throw new \InvalidArgumentException(sprintf('The HTTP status code "%s" is not valid.', $code)); } $this->statusText = false === $text ? '' : (null === $text ? self::$statusTexts[$this->statusCode] : $text); } public function getStatusCode() { return $this->statusCode; } public function setCharset($charset) { $this->charset = $charset; } public function getCharset() { return $this->charset; } public function isCacheable() { if (!in_array($this->statusCode, array(200, 203, 300, 301, 302, 404, 410))) { return false; } if ($this->headers->hasCacheControlDirective('no-store') || $this->headers->getCacheControlDirective('private')) { return false; } return $this->isValidateable() || $this->isFresh(); } public function isFresh() { return $this->getTtl() > 0; } public function isValidateable() { return $this->headers->has('Last-Modified') || $this->headers->has('ETag'); } public function setPrivate() { $this->headers->removeCacheControlDirective('public'); $this->headers->addCacheControlDirective('private'); } public function setPublic() { $this->headers->addCacheControlDirective('public'); $this->headers->removeCacheControlDirective('private'); } public function mustRevalidate() { return $this->headers->hasCacheControlDirective('must-revalidate') || $this->headers->has('must-proxy-revalidate'); } public function getDate() { if (null === $date = $this->headers->getDate('Date')) { $date = new \DateTime(null, new \DateTimeZone('UTC')); $this->headers->set('Date', $date->format('D, d M Y H:i:s').' GMT'); } return $date; } public function getAge() { if ($age = $this->headers->get('Age')) { return $age; } return max(time() - $this->getDate()->format('U'), 0); } public function expire() { if ($this->isFresh()) { $this->headers->set('Age', $this->getMaxAge()); } } public function getExpires() { return $this->headers->getDate('Expires'); } public function setExpires(\DateTime $date = null) { if (null === $date) { $this->headers->remove('Expires'); } else { $date = clone $date; $date->setTimezone(new \DateTimeZone('UTC')); $this->headers->set('Expires', $date->format('D, d M Y H:i:s').' GMT'); } } public function getMaxAge() { if ($age = $this->headers->getCacheControlDirective('s-maxage')) { return $age; } if ($age = $this->headers->getCacheControlDirective('max-age')) { return $age; } if (null !== $this->getExpires()) { return $this->getExpires()->format('U') - $this->getDate()->format('U'); } return null; } public function setMaxAge($value) { $this->headers->addCacheControlDirective('max-age', $value); } public function setSharedMaxAge($value) { $this->headers->addCacheControlDirective('s-maxage', $value); } public function getTtl() { if ($maxAge = $this->getMaxAge()) { return $maxAge - $this->getAge(); } return null; } public function setTtl($seconds) { $this->setSharedMaxAge($this->getAge() + $seconds); } public function setClientTtl($seconds) { $this->setMaxAge($this->getAge() + $seconds); } public function getLastModified() { return $this->headers->getDate('Last-Modified'); } public function setLastModified(\DateTime $date = null) { if (null === $date) { $this->headers->remove('Last-Modified'); } else { $date = clone $date; $date->setTimezone(new \DateTimeZone('UTC')); $this->headers->set('Last-Modified', $date->format('D, d M Y H:i:s').' GMT'); } } public function getEtag() { return $this->headers->get('ETag'); } public function setEtag($etag = null, $weak = false) { if (null === $etag) { $this->headers->remove('Etag'); } else { if (0 !== strpos($etag, '"')) { $etag = '"'.$etag.'"'; } $this->headers->set('ETag', (true === $weak ? 'W/' : '').$etag); } } public function setCache(array $options) { if ($diff = array_diff(array_keys($options), array('etag', 'last_modified', 'max_age', 's_maxage', 'private', 'public'))) { throw new \InvalidArgumentException(sprintf('Response does not support the following options: "%s".', implode('", "', array_keys($diff)))); } if (isset($options['etag'])) { $this->setEtag($options['etag']); } if (isset($options['last_modified'])) { $this->setLastModified($options['last_modified']); } if (isset($options['max_age'])) { $this->setMaxAge($options['max_age']); } if (isset($options['s_maxage'])) { $this->setSharedMaxAge($options['s_maxage']); } if (isset($options['public'])) { if ($options['public']) { $this->setPublic(); } else { $this->setPrivate(); } } if (isset($options['private'])) { if ($options['private']) { $this->setPrivate(); } else { $this->setPublic(); } } } public function setNotModified() { $this->setStatusCode(304); $this->setContent(null); foreach (array('Allow', 'Content-Encoding', 'Content-Language', 'Content-Length', 'Content-MD5', 'Content-Type', 'Last-Modified') as $header) { $this->headers->remove($header); } } public function hasVary() { return (Boolean) $this->headers->get('Vary'); } public function getVary() { if (!$vary = $this->headers->get('Vary')) { return array(); } return is_array($vary) ? $vary : preg_split('/[\s,]+/', $vary); } public function setVary($headers, $replace = true) { $this->headers->set('Vary', $headers, $replace); } public function isNotModified(Request $request) { $lastModified = $request->headers->get('If-Modified-Since'); $notModified = false; if ($etags = $request->getEtags()) { $notModified = (in_array($this->getEtag(), $etags) || in_array('*', $etags)) && (!$lastModified || $this->headers->get('Last-Modified') == $lastModified); } elseif ($lastModified) { $notModified = $lastModified == $this->headers->get('Last-Modified'); } if ($notModified) { $this->setNotModified(); } return $notModified; } public function isInvalid() { return $this->statusCode < 100 || $this->statusCode >= 600; } public function isInformational() { return $this->statusCode >= 100 && $this->statusCode < 200; } public function isSuccessful() { return $this->statusCode >= 200 && $this->statusCode < 300; } public function isRedirection() { return $this->statusCode >= 300 && $this->statusCode < 400; } public function isClientError() { return $this->statusCode >= 400 && $this->statusCode < 500; } public function isServerError() { return $this->statusCode >= 500 && $this->statusCode < 600; } public function isOk() { return 200 === $this->statusCode; } public function isForbidden() { return 403 === $this->statusCode; } public function isNotFound() { return 404 === $this->statusCode; } public function isRedirect() { return in_array($this->statusCode, array(301, 302, 303, 307)); } public function isEmpty() { return in_array($this->statusCode, array(201, 204, 304)); } public function isRedirected($location) { return $this->isRedirect() && $location == $this->headers->get('Location'); } } } namespace Symfony\Component\HttpFoundation { class ResponseHeaderBag extends HeaderBag { protected $computedCacheControl = array(); public function __construct(array $headers = array()) { parent::__construct($headers); if (!isset($this->headers['cache-control'])) { $this->set('cache-control', ''); } } public function replace(array $headers = array()) { parent::replace($headers); if (!isset($this->headers['cache-control'])) { $this->set('cache-control', ''); } } public function set($key, $values, $replace = true) { parent::set($key, $values, $replace); if (in_array(strtr(strtolower($key), '_', '-'), array('cache-control', 'etag', 'last-modified', 'expires'))) { $computed = $this->computeCacheControlValue(); $this->headers['cache-control'] = array($computed); $this->computedCacheControl = $this->parseCacheControl($computed); } } public function remove($key) { parent::remove($key); if ('cache-control' === strtr(strtolower($key), '_', '-')) { $this->computedCacheControl = array(); } } public function hasCacheControlDirective($key) { return array_key_exists($key, $this->computedCacheControl); } public function getCacheControlDirective($key) { return array_key_exists($key, $this->computedCacheControl) ? $this->computedCacheControl[$key] : null; } public function clearCookie($name, $path = null, $domain = null) { $this->setCookie(new Cookie($name, null, 1, $path, $domain)); } protected function computeCacheControlValue() { if (!$this->cacheControl && !$this->has('ETag') && !$this->has('Last-Modified') && !$this->has('Expires')) { return 'no-cache'; } if (!$this->cacheControl) { return 'private, must-revalidate'; } $header = $this->getCacheControlHeader(); if (isset($this->cacheControl['public']) || isset($this->cacheControl['private'])) { return $header; } if (!isset($this->cacheControl['s-maxage'])) { return $header.', private'; } return $header; } }} namespace Symfony\Component\HttpKernel\Event { use Symfony\Component\HttpKernel\HttpKernelInterface; use Symfony\Component\HttpFoundation\Request; use Symfony\Component\HttpFoundation\Response; class FilterResponseEvent extends KernelEvent { private $response; public function __construct(HttpKernelInterface $kernel, Request $request, $requestType, Response $response) { parent::__construct($kernel, $request, $requestType); $this->setResponse($response); } public function getResponse() { return $this->response; } public function setResponse(Response $response) { $this->response = $response; } }} namespace { use Silex\Application; use Silex\Extension\TwigExtension; use Silex\Extension\UrlGeneratorExtension; use Silex\Extension\SymfonyBridgesExtension; use Sismo\Sismo; use Sismo\Project; use Sismo\Commit; use Sismo\Storage; use Sismo\Builder; use Symfony\Component\ClassLoader\UniversalClassLoader; $loader = new UniversalClassLoader(); $loader->registerNamespaces(array( 'Sismo' => __DIR__, 'Symfony' => __DIR__.'/../vendor', )); $loader->registerPrefixes(array( 'Twig_' => __DIR__.'/../vendor/silex/vendor/twig/lib', )); $loader->register(); $app = new Application(); $app->register(new SymfonyBridgesExtension()); $app->register(new UrlGeneratorExtension()); $app->register(new TwigExtension(), array( 'twig.path' => __DIR__.'/templates', 'twig.options' => array('debug' => true, 'strict_variables' => true), 'twig.configure' => $app->protect(function ($twig) use ($app) { $twig->setCache($app['twig.cache.path']); }), )); $app['data.path'] = getenv('SISMO_DATA_PATH') ?: getenv('HOME').'/.sismo/data'; $app['config.file'] = getenv('SISMO_CONFIG_PATH') ?: getenv('HOME').'/.sismo/config.php'; $app['build.path'] = $app->share(function ($app) { return $app['data.path'].'/build'; }); $app['db.path'] = $app->share(function ($app) { if (!is_dir($app['data.path'])) { mkdir($app['data.path'], 0777, true); } return $app['data.path'].'/sismo.db'; }); $app['twig.cache.path'] = $app->share(function ($app) { return $app['data.path'].'/cache'; }); $app['git.path'] = 'git'; $app['svn.path'] = 'svn'; $app['git.cmds'] = array(); $app['svn.cmds'] = array(); $app['db.schema'] = <<<EOF
CREATE TABLE IF NOT EXISTS project (
    slug        TEXT,
    name        TEXT,
    repository  TEXT,
    branch      TEXT,
    command     BLOB,
    url_pattern TEXT,
    PRIMARY KEY (slug)
);

CREATE TABLE IF NOT EXISTS `commit` (
    slug          TEXT,
    sha           TEXT,
    date          TEXT,
    message       BLOB,
    author        TEXT,
    status        TEXT,
    output        BLOB,
    build_date    TEXT DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (slug, sha),
    CONSTRAINT slug FOREIGN KEY (slug) REFERENCES project(slug) ON DELETE CASCADE
);
EOF;
$app['db'] = $app->share(function () use ($app) { $db = new \SQLite3($app['db.path']); $db->busyTimeout(1000); $db->exec($app['db.schema']); return $db; }); $app['storage'] = $app->share(function () use ($app) { return new Storage($app['db']); }); $app['builder_git'] = $app->share(function () use ($app) { return new \Sismo\GitBuilder($app['build.path'], $app['git.path'], $app['git.cmds']); }); $app['builder_svn'] = $app->share(function () use ($app) { return new \Sismo\SvnBuilder($app['build.path'], $app['svn.path'], $app['svn.cmds']); }); $app['sismo'] = $app->share(function () use ($app) { $sismo = new Sismo($app['storage'], array('svn'=>$app['builder_svn'],'git'=>$app['builder_git'])); if (!is_file($app['config.file'])) { throw new \RuntimeException(sprintf("Looks like you forgot to define your projects.\nSismo looked into \"%s\".", $app['config.file'])); } $projects = require $app['config.file']; if (null === $projects) { throw new \RuntimeException(sprintf('The "%s" configuration file must return an array of Projects (returns null).', $app['config.file'])); } if (!is_array($projects)) { throw new \RuntimeException(sprintf('The "%s" configuration file must return an array of Projects (returns a non-array).', $app['config.file'])); } foreach ($projects as $project) { if (!$project instanceof Project) { throw new \RuntimeException(sprintf('The "%s" configuration file must return an array of Project instances.', $app['config.file'])); } $sismo->addProject($project); } return $sismo; }); }namespace { class FakeTwigLoader implements Twig_LoaderInterface { public function getSource($name) {} public function getCacheKey($name) { static $templates = array( 'ccmonitor.twig.xml' => '/Users/aurelien/Workspaces/efidev/Sismo/src/templates/ccmonitor.twig.xml', 'error.twig' => '/Users/aurelien/Workspaces/efidev/Sismo/src/templates/error.twig', 'layout.twig' => '/Users/aurelien/Workspaces/efidev/Sismo/src/templates/layout.twig', 'project.twig' => '/Users/aurelien/Workspaces/efidev/Sismo/src/templates/project.twig', 'projects.twig' => '/Users/aurelien/Workspaces/efidev/Sismo/src/templates/projects.twig', ); return $templates[$name]; } public function isFresh($name, $time) { return true; } } $app['twig.loader'] = $app->share(function () { return new FakeTwigLoader(); }); } namespace { class __TwigTemplate_955f046f82c4b30a50f9ae872d613ee6 extends Twig_Template { public function display(array $context, array $blocks = array()) { $context = array_merge($this->env->getGlobals(), $context); echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<Projects>
"; $context['_parent'] = (array) $context; $context['_seq'] = twig_ensure_traversable((isset($context['projects']) ? $context['projects'] : null)); foreach ($context['_seq'] as $context['_key'] => $context['project']) { $context['commit'] = $this->getAttribute((isset($context['project']) ? $context['project'] : null), "getLatestCommit", array(), "any", false, 4); echo "<Project
  name=\""; echo twig_escape_filter($this->env, (isset($context['project']) ? $context['project'] : null), "html"); echo "\"
  category=\"\"
  activity=\""; echo twig_escape_filter($this->env, $this->getAttribute((isset($context['project']) ? $context['project'] : null), "ccactivity", array(), "any", false, 8), "html"); echo "\"
  lastBuildStatus=\""; echo twig_escape_filter($this->env, $this->getAttribute((isset($context['project']) ? $context['project'] : null), "ccstatus", array(), "any", false, 9), "html"); echo "\"
  lastBuildLabel=\"build."; echo twig_escape_filter($this->env, ((((isset($context['commit']) ? $context['commit'] : null) && $this->getAttribute((isset($context['commit']) ? $context['commit'] : null), "built", array(), "any", false, 10))) ? ($this->getAttribute((isset($context['commit']) ? $context['commit'] : null), "sha", array(), "any", false, 10)) : ("Unknown")), "html"); echo "\"
  lastBuildTime=\""; echo twig_escape_filter($this->env, ((((isset($context['commit']) ? $context['commit'] : null) && $this->getAttribute((isset($context['commit']) ? $context['commit'] : null), "built", array(), "any", false, 11))) ? ($this->getAttribute($this->getAttribute((isset($context['commit']) ? $context['commit'] : null), "builddate", array(), "any", false, 11), "format", array($this->env->getExtension('core')->getConstant("DATE_ATOM"), ), "method", false, 11)) : ("1970-01-01T00:00:00.000000-00:00")), "html"); echo "\"
  webUrl=\""; echo twig_escape_filter($this->env, $this->env->getExtension('routing')->getUrl("project", array("slug" => $this->getAttribute((isset($context['project']) ? $context['project'] : null), "slug", array(), "any", false, 12))), "html"); echo "\"
/>
"; } $_parent = $context['_parent']; unset($context['_seq'], $context['_iterated'], $context['_key'], $context['project'], $context['_parent'], $context['loop']); $context = array_merge($_parent, array_intersect_key($context, $_parent)); echo "</Projects>
"; } public function getTemplateName() { return "ccmonitor.twig.xml"; } } class __TwigTemplate_f94ecb86bda569bf076a2e96b5ca7489 extends Twig_Template { protected $parent; public function __construct(Twig_Environment $env) { parent::__construct($env); $this->blocks = array( 'title' => array($this, 'block_title'), 'content' => array($this, 'block_content'), ); } public function getParent(array $context) { if (null === $this->parent) { $this->parent = $this->env->loadTemplate("layout.twig"); } return $this->parent; } public function display(array $context, array $blocks = array()) { $context = array_merge($this->env->getGlobals(), $context); $this->getParent($context)->display($context, array_merge($this->blocks, $blocks)); } public function block_title($context, array $blocks = array()) { echo "Error"; } public function block_content($context, array $blocks = array()) { echo "    <h1>Hmmm, looks like something went wrong</h1>

    <p id=\"error\">"; echo (((isset($context['error']) ? $context['error'] : null)) ? (twig_strtr((isset($context['error']) ? $context['error'] : null), array("
" => "<br />"))) : ("An error occurred")); echo "</p>
"; } public function getTemplateName() { return "error.twig"; } } class __TwigTemplate_a0ebc1e1fa714fb21c40cab09ddf9ac7 extends Twig_Template { public function __construct(Twig_Environment $env) { parent::__construct($env); $this->blocks = array( 'title' => array($this, 'block_title'), 'content' => array($this, 'block_content'), ); } public function display(array $context, array $blocks = array()) { $context = array_merge($this->env->getGlobals(), $context); echo "<!DOCTYPE html>
<html>
    <head>
        <meta charset=\"utf-8\" />
        <title>"; $this->displayBlock('title', $context, $blocks); echo " | Sismo</title>
        <link href=\""; echo twig_escape_filter($this->env, $this->getAttribute($this->getAttribute((isset($context['app']) ? $context['app'] : null), "request", array(), "any", false, 6), "baseurl", array(), "any", false, 6), "html"); echo "/css/sismo.css\" rel=\"stylesheet\" />
    </head>
    <body>
        <div id=\"content\">
            "; $this->displayBlock('content', $context, $blocks); echo "        </div>
        <footer>
            <span>Powered by <strong><a href=\"http://sismo-project.org/\">Sismo</a></strong> "; echo twig_escape_filter($this->env, $this->env->getExtension('core')->getConstant("Sismo\\Sismo::VERSION"), "html"); echo ", your Personal Continuous Testing Server</span>
            <a href=\"http://www.sensiolabs.com/\"><img class=\"png_fix\" src=\""; echo twig_escape_filter($this->env, $this->getAttribute($this->getAttribute((isset($context['app']) ? $context['app'] : null), "request", array(), "any", false, 14), "baseurl", array(), "any", false, 14), "html"); echo "/images/sensio-labs-product.png\" alt=\"a Sensio Labs product\" /></a>
        </footer>
    </body>
</html>
"; } public function block_title($context, array $blocks = array()) { echo ""; } public function block_content($context, array $blocks = array()) { echo ""; } public function getTemplateName() { return "layout.twig"; } } class __TwigTemplate_7b03c3e5a710bde44646275b190aa857 extends Twig_Template { protected $parent; public function __construct(Twig_Environment $env) { parent::__construct($env); $this->blocks = array( 'title' => array($this, 'block_title'), 'content' => array($this, 'block_content'), ); } public function getParent(array $context) { if (null === $this->parent) { $this->parent = $this->env->loadTemplate("layout.twig"); } return $this->parent; } public function display(array $context, array $blocks = array()) { $context = array_merge($this->env->getGlobals(), $context); $context['__internal_7b03c3e5a710bde44646275b190aa857_1'] = $this; $this->getParent($context)->display($context, array_merge($this->blocks, $blocks)); } public function block_title($context, array $blocks = array()) { echo twig_escape_filter($this->env, ("Project " . (isset($context['project']) ? $context['project'] : null)), "html"); } public function block_content($context, array $blocks = array()) { echo "    <div id=\"back\"><a href=\""; echo twig_escape_filter($this->env, $this->env->getExtension('routing')->getPath("projects"), "html"); echo "\">&laquo; Projects</a></div>

    <h1>
        <a href=\""; echo twig_escape_filter($this->env, $this->env->getExtension('routing')->getPath("project", array("slug" => $this->getAttribute((isset($context['project']) ? $context['project'] : null), "slug", array(), "any", false, 11))), "html"); echo "\">
            "; echo twig_escape_filter($this->env, $this->getAttribute((isset($context['project']) ? $context['project'] : null), "shortname", array(), "any", false, 12), "html"); echo "
            "; if ($this->getAttribute((isset($context['project']) ? $context['project'] : null), "subname", array(), "any", false, 13)) { echo "<small> &mdash; "; echo twig_escape_filter($this->env, $this->getAttribute((isset($context['project']) ? $context['project'] : null), "subname", array(), "any", false, 13), "html"); echo "</small>"; } echo "        </a>
    </h1>

    "; if ((!(isset($context['commit']) ? $context['commit'] : null))) { echo "        <p id=\"error\">Never built yet.</p>
    "; } else { echo "        <div class=\"clearfix "; echo twig_escape_filter($this->env, $this->getAttribute((isset($context['commit']) ? $context['commit'] : null), "statuscode", array(), "any", false, 20), "html"); echo "\" id=\"build\">"; echo twig_escape_filter($this->env, $this->getAttribute($context['__internal_7b03c3e5a710bde44646275b190aa857_1'], "commit_block", array((isset($context['commit']) ? $context['commit'] : null), ), "method", false, 20), "html"); echo "</div>

        "; if ($this->getAttribute((isset($context['commit']) ? $context['commit'] : null), "isbuilt", array(), "any", false, 22)) { echo "            <div id=\"output\">
                <pre>"; echo (($this->getAttribute((isset($context['commit']) ? $context['commit'] : null), "output", array(), "any", false, 24)) ? ($this->getAttribute((isset($context['commit']) ? $context['commit'] : null), "decoratedoutput", array(), "any", false, 24)) : ("No output")); echo "</pre>
            </div>
        "; } echo "
        "; if ((twig_test_defined("commits", $context) && (isset($context['commits']) ? $context['commits'] : null))) { echo "            <h1>Builds History</h1>
            <ul id=\"builds\">
                "; $context['_parent'] = (array) $context; $context['_seq'] = twig_ensure_traversable((isset($context['commits']) ? $context['commits'] : null)); foreach ($context['_seq'] as $context['_key'] => $context['commit']) { echo "                    <li class=\""; echo twig_escape_filter($this->env, $this->getAttribute((isset($context['commit']) ? $context['commit'] : null), "statuscode", array(), "any", false, 32), "html"); echo "\">"; echo twig_escape_filter($this->env, $this->getAttribute($context['__internal_7b03c3e5a710bde44646275b190aa857_1'], "commit_block", array((isset($context['commit']) ? $context['commit'] : null), ), "method", false, 32), "html"); echo "</li>
                "; } $_parent = $context['_parent']; unset($context['_seq'], $context['_iterated'], $context['_key'], $context['commit'], $context['_parent'], $context['loop']); $context = array_merge($_parent, array_intersect_key($context, $_parent)); echo "            </ul>
        "; } echo "    "; } } public function getcommit_block($commit = null) { $context = array_merge($this->env->getGlobals(), array( "commit" => $commit, )); ob_start(); echo "    <div class=\"commit\">"; echo twig_escape_filter($this->env, $this->getAttribute($this, "commit_link", array((isset($context['commit']) ? $context['commit'] : null), ), "method", false, 40), "html"); echo "</div>
    <h2>
        "; echo twig_escape_filter($this->env, $this->getAttribute((isset($context['commit']) ? $context['commit'] : null), "message", array(), "any", false, 42), "html"); echo "
        <span class=\"permalink\"><a href=\""; echo twig_escape_filter($this->env, $this->env->getExtension('routing')->getPath("commit", array("slug" => $this->getAttribute($this->getAttribute((isset($context['commit']) ? $context['commit'] : null), "project", array(), "any", false, 43), "slug", array(), "any", false, 43), "sha" => $this->getAttribute((isset($context['commit']) ? $context['commit'] : null), "sha", array(), "any", false, 43))), "html"); echo "\">¶</a></span>
    </h2>
    <div class=\"meta\">
        by <em>"; echo twig_escape_filter($this->env, $this->getAttribute((isset($context['commit']) ? $context['commit'] : null), "author", array(), "any", false, 46), "html"); echo "</em> on <em>"; echo twig_escape_filter($this->env, twig_date_format_filter($this->getAttribute((isset($context['commit']) ? $context['commit'] : null), "date", array(), "any", false, 46), "j M Y H:m"), "html"); echo "</em>
    </div>
"; return ob_get_clean(); } public function getcommit_link($commit = null) { $context = array_merge($this->env->getGlobals(), array( "commit" => $commit, )); ob_start(); echo "    "; if ((!$this->getAttribute($this->getAttribute((isset($context['commit']) ? $context['commit'] : null), "project", array(), "any", false, 51), "urlpattern", array(), "any", false, 51))) { echo "        #"; echo twig_escape_filter($this->env, $this->getAttribute((isset($context['commit']) ? $context['commit'] : null), "shortsha", array(), "any", false, 52), "html"); echo " "; echo twig_escape_filter($this->env, $this->getAttribute((isset($context['commit']) ? $context['commit'] : null), "status", array(), "any", false, 52), "html"); echo "
    "; } else { echo "        #<a href=\""; echo twig_escape_filter($this->env, twig_strtr($this->getAttribute($this->getAttribute((isset($context['commit']) ? $context['commit'] : null), "project", array(), "any", false, 54), "urlpattern", array(), "any", false, 54), array("%commit%" => $this->getAttribute((isset($context['commit']) ? $context['commit'] : null), "sha", array(), "any", false, 54))), "html"); echo "\">"; echo twig_escape_filter($this->env, $this->getAttribute((isset($context['commit']) ? $context['commit'] : null), "shortsha", array(), "any", false, 54), "html"); echo "</a> "; echo twig_escape_filter($this->env, $this->getAttribute((isset($context['commit']) ? $context['commit'] : null), "status", array(), "any", false, 54), "html"); echo "
    "; } return ob_get_clean(); } public function getTemplateName() { return "project.twig"; } } class __TwigTemplate_646de8137c11fec9ed3e225bb0fb60d7 extends Twig_Template { protected $parent; public function __construct(Twig_Environment $env) { parent::__construct($env); $this->blocks = array( 'title' => array($this, 'block_title'), 'content' => array($this, 'block_content'), ); } public function getParent(array $context) { if (null === $this->parent) { $this->parent = $this->env->loadTemplate("layout.twig"); } return $this->parent; } public function display(array $context, array $blocks = array()) { $context = array_merge($this->env->getGlobals(), $context); $this->getParent($context)->display($context, array_merge($this->blocks, $blocks)); } public function block_title($context, array $blocks = array()) { echo "Projects"; } public function block_content($context, array $blocks = array()) { echo "    "; if ((!(isset($context['projects']) ? $context['projects'] : null))) { echo "        <p>No project yet.</p>
    "; } else { echo "        <ul id=\"projects\">
            "; $context['_parent'] = (array) $context; $context['_seq'] = twig_ensure_traversable((isset($context['projects']) ? $context['projects'] : null)); foreach ($context['_seq'] as $context['i'] => $context['project']) { echo "                <li class=\""; echo twig_escape_filter($this->env, $this->getAttribute((isset($context['project']) ? $context['project'] : null), "statuscode", array(), "any", false, 11), "html"); echo "\">
                    <div class=\"status\">"; echo twig_escape_filter($this->env, $this->getAttribute((isset($context['project']) ? $context['project'] : null), "status", array(), "any", false, 12), "html"); echo "</div>
                    <a href=\""; echo twig_escape_filter($this->env, $this->env->getExtension('routing')->getPath("project", array("slug" => $this->getAttribute((isset($context['project']) ? $context['project'] : null), "slug", array(), "any", false, 13))), "html"); echo "\">
                        "; echo twig_escape_filter($this->env, $this->getAttribute((isset($context['project']) ? $context['project'] : null), "shortname", array(), "any", false, 14), "html"); echo "
                        "; if ($this->getAttribute((isset($context['project']) ? $context['project'] : null), "subname", array(), "any", false, 15)) { echo "<small> &mdash; "; echo twig_escape_filter($this->env, $this->getAttribute((isset($context['project']) ? $context['project'] : null), "subname", array(), "any", false, 15), "html"); echo "</small>"; } echo "                    </a>
               </li>
            "; } $_parent = $context['_parent']; unset($context['_seq'], $context['_iterated'], $context['i'], $context['project'], $context['_parent'], $context['loop']); $context = array_merge($_parent, array_intersect_key($context, $_parent)); echo "        </ul>
    "; } } public function getTemplateName() { return "projects.twig"; } } } namespace { use Sismo\Sismo; use Sismo\BuildException; use Symfony\Component\Console\Application; use Symfony\Component\Console\Input\InputInterface; use Symfony\Component\Console\Input\InputArgument; use Symfony\Component\Console\Input\InputOption; use Symfony\Component\Console\Output\OutputInterface; $console = new Application('Sismo', Sismo::VERSION); $console ->register('build') ->setDefinition(array( new InputArgument('slug', InputArgument::OPTIONAL, 'Project slug'), new InputArgument('sha', InputArgument::OPTIONAL, 'Commit sha'), new InputOption('force', '', InputOption::VALUE_NONE, 'Force the build'), new InputOption('local', '', InputOption::VALUE_NONE, 'Disable remote sync'), new InputOption('silent', '', InputOption::VALUE_NONE, 'Disable notifications'), new InputOption('timeout', '', InputOption::VALUE_REQUIRED, 'Time limit'), new InputOption('data-path', '', InputOption::VALUE_REQUIRED, 'The data path'), new InputOption('config-file', '', InputOption::VALUE_REQUIRED, 'The config file'), )) ->setDescription('Build projects') ->setHelp(<<<EOF
Without any arguments, the <info>build</info> command builds the latest commit
of all configured projects one after the other:

    <info>./sismo build</info>

The command loads project configurations from
<comment>~/.sismo/config.php</comment>. Change it with the
<info>--config-file</info> option:

    <info>./sismo build --config-file=/path/to/config.php</info>

Data (repository, DB, ...) are stored in <comment>~/.sismo/data/</comment>.
The <info>--data-path</info> option allows you to change the default:

    <info>./sismo build --data-path=/path/to/data</info>

Pass the project slug to build a specific project:

    <info>./sismo build twig</info>

Force a specific commit to be built by passing the SHA:

    <info>./sismo build twig a1ef34</info>

Use <comment>--force</comment> to force the built even if it has already been
built previously:

    <info>./sismo build twig a1ef34 --force</info>

Disable notifications with <comment>--silent</comment>:

    <info>./sismo build twig a1ef34 --silent</info>

Disable repository synchonization with <comment>--local</comment>:

    <info>./sismo build twig a1ef34 --local</info>

Limit the time (in seconds) spent by the command building projects by using
the <comment>--timeout</comment> option:

    <info>./sismo build twig --timeout 3600</info>

When you use this command as a cron job, <comment>--timeout</comment> can avoid
the command to be run concurrently. Be warned that this is a rough estimate as
the time is only checked between two builds. When a build is started, it won't
be stopped if the time limit is over.

Use the <comment>--verbose</comment> option to debug builds in case of a
problem.
EOF
) ->setCode(function (InputInterface $input, OutputInterface $output) use ($app) { if ($input->getOption('data-path')) { $app['data.path'] = $input->getOption('data-path'); } if ($input->getOption('config-file')) { $app['config.file'] = $input->getOption('config-file'); } $sismo = $app['sismo']; if ($slug = $input->getArgument('slug')) { if (!$sismo->hasProject($slug)) { $output->writeln(sprintf('<error>Project "%s" does not exist.</error>', $slug)); return 1; } $projects = array($sismo->getProject($slug)); } else { $projects = $sismo->getProjects(); } $start = time(); $startedOut = false; $startedErr = false; $callback = null; if (OutputInterface::VERBOSITY_VERBOSE === $output->getVerbosity()) { $callback = function ($type, $buffer) use ($output, &$startedOut, &$startedErr) { if ('err' === $type) { if (!$startedErr) { $output->write("\nERR| "); $startedErr = true; $startedOut = false; } $output->write(str_replace("\n", "\nERR| ", $buffer)); } else { if (!$startedOut) { $output->write("\nOUT| "); $startedOut = true; $startedErr = false; } $output->write(str_replace("\n", "\nOUT| ", $buffer)); } }; } $flags = 0; if ($input->getOption('force')) { $flags = $flags | Sismo::FORCE_BUILD; } if ($input->getOption('local')) { $flags = $flags | Sismo::LOCAL_BUILD; } if ($input->getOption('silent')) { $flags = $flags | Sismo::SILENT_BUILD; } foreach ($projects as $project) { if ($input->getOption('timeout') && time() - $begin > $input->getOption('timeout')) { break; } try { $output->writeln(sprintf('<info>Building Project "%s" (into "%s")</info>', $project, substr(md5($project->getRepository()), 0, 6))); $sismo->build($project, $input->getArgument('sha'), $flags, $callback); $output->writeln(''); } catch (BuildException $e) { $output->writeln("\n".sprintf('<error>%s</error>', $e->getMessage())); return 1; } } }) ; } namespace { use Silex\Application; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpKernel\Exception\NotFoundHttpException; use Symfony\Component\HttpKernel\Exception\HttpExceptionInterface; $app->error(function (\Exception $e) use ($app) { $error = null; if ($e instanceof NotFoundHttpException || in_array($app['request']->server->get('REMOTE_ADDR'), array('127.0.0.1', '::1'))) { $error = $e->getMessage(); } return new Response( $app['twig']->render('error.twig', array('error' => $error)), $e instanceof HttpExceptionInterface ? $e->getStatusCode() : 500 ); }); $app->get('/', function() use ($app) { return $app['twig']->render('projects.twig', array('projects' => $app['sismo']->getProjects())); })->bind('projects'); $app->get('/{slug}', function($slug) use ($app) { if (!$app['sismo']->hasProject($slug)) { throw new NotFoundHttpException(sprintf('Project "%s" not found.', $slug)); } $project = $app['sismo']->getProject($slug); $commits = $project->getCommits(); $latest = array_shift($commits); return $app['twig']->render('project.twig', array( 'project' => $project, 'commit' => $latest, 'commits' => $commits, )); })->bind('project'); $app->get('/{slug}/{sha}', function($slug, $sha) use ($app) { if (!$app['sismo']->hasProject($slug)) { throw new NotFoundHttpException(sprintf('Project "%s" not found.', $slug)); } $project = $app['sismo']->getProject($slug); if (!$commit = $app['storage']->getCommit($project, $sha)) { throw new NotFoundHttpException(sprintf('Commit "%s" for project "%s" not found.', $sha, $slug)); } return $app['twig']->render('project.twig', array( 'project' => $project, 'commit' => $commit, )); })->bind('commit'); $app->get('/dashboard/cctray.xml', function() use ($app) { $content = $app['twig']->render('ccmonitor.twig.xml', array('projects' => $app['sismo']->getProjects())); return new Response($content, 200, array('content-type' => 'text/xml')); })->bind('ccmonitor'); } namespace { use Symfony\Component\HttpFoundation\Response; $app->get('/css/sismo.css', function() { return new Response('/*
Copyright (c) 2009, Yahoo! Inc. All rights reserved.
Code licensed under the BSD License:
http://developer.yahoo.net/yui/license.txt
version: 2.7.0
*/
html{color:#000;background:#FFF;}body,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,code,form,fieldset,legend,input,button,textarea,p,blockquote,th,td{margin:0;padding:0;}table{border-collapse:collapse;border-spacing:0;}fieldset,img{border:0;}address,caption,cite,code,dfn,em,strong,th,var,optgroup{font-style:inherit;font-weight:inherit;}del,ins{text-decoration:none;}li{list-style:none;}caption,th{text-align:left;}h1,h2,h3,h4,h5,h6{font-size:100%;font-weight:normal;}q:before,q:after{content:\'\';}abbr,acronym{border:0;font-variant:normal;}sup{vertical-align:baseline;}sub{vertical-align:baseline;}legend{color:#000;}input,button,textarea,select,optgroup,option{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;}input,button,textarea,select{*font-size:100%;}

/* Sismo CSS */
html {
    background-color: #182d33;
}

body {
    font-family: Georgia, serif;
    color: #fff;
    font-size: 16px;
}

em {
    font-style: italic;
}

strong {
    font-weight: bold;
}

h1 {
    font-size: 30px;
    margin-top: 30px;
    margin-bottom: 10px;
}

h1 a {
    color: #fff;
}

h2 {
    font-size: 26px;
}

#builds h2 {
    font-size: 21px;
}

#content, footer {
    width: 780px;
    margin: 0 auto;
    background: #274751;
    padding: 15px 24px;
}

#content {
    padding-top: 160px;
    background: #274751 url(../images/header.png) no-repeat right top;
}

a {
    text-decoration: none;
}

a:hover {
    text-decoration: underline;
}

.success {
    background: url(../images/success.png) repeat-y !important;
}

.failed {
  background: url(../images/failed.png) repeat-y !important;
}

.success a, .failed a {
    color: #fff !important;
}

#projects {
    margin: 15px 0;
    margin-top: 30px;
}

#projects li {
    position: relative;
    padding: 12px;
    margin-bottom: 5px;
    font-size: 30px;
    vertical-align: bottom;
    border: 3px solid #ccc;
    background: #898989 url(../images/shadow.png) repeat-y;
}

#projects li a {
    color: #555;
}

#build {
    padding: 10px 15px;
    margin-bottom: 15px;
    border: 3px solid #ccc;
    background: url(../images/nobuild.png) repeat-y;
}

#build a {
    color: #555;
}

#output {
    margin-bottom: 15px;
}

#output pre {
    background: #111;
    color: #fff;
    padding: 8px;
    overflow: auto;
    max-height: 300px;
    width: 764px;
    font-size: 14px;
}

.meta {
    font-size: 13px;
    font-family: Georgia, serif;
}

#builds li {
    padding: 8px 12px;
    margin-bottom: 5px;
    border: 3px solid #ccc;
    background: url(../images/nobuild.png) repeat-y;
}

#builds li a {
    color: #fff;
}

#builds .meta {
    font-size: 14px;
}

.commit {
    float: right;
    padding-left: 15px;
    padding-bottom: 15px;
    color: #333 !important;
}

.commit a {
    color: #333 !important;
}

.status {
    float: right;
    padding-left: 15px;
    padding-bottom: 15px;
    color: #333 !important;
    font-size: 15px;
}

footer {
    text-align: center;
    font-size: 12px;
    font-family: Arial;
    background: #274751 url(../images/hr.png) no-repeat;
}

footer span {
    margin-right: 40px;
}

footer img {
    margin: 0 4px;
    vertical-align: middle;
}

footer a {
    color: #fff;
}

.clearfix:after { content: "\0020"; display: block; height: 0; clear: both; visibility: hidden; overflow: hidden; }
.clearfix { display: inline-block; }
* html .clearfix { height: 1%; }
.clearfix { display: block; }

#project_command_test {
    width: 100%;
    height: 150px;
}

.permalink {
    font-size: 60%;
}

.permalink a {
    color: #eee !important;
}

#back {
    float: right;
}

#back a {
    color: #ddd;
}

#error {
    margin-top: 30px;
    margin-bottom: 30px;
    position: relative;
    padding: 12px;
    font-size: 22px;
    vertical-align: bottom;
    border: 3px solid #ccc;
    background: #898989 url(../images/shadow.png) repeat-y;
}

.ansi_color_fg_black   { color: black; }
.ansi_color_fg_red     { color: red; }
.ansi_color_fg_green   { color: green; }
.ansi_color_fg_yellow  { color: yellow; }
.ansi_color_fg_blue    { color: blue; }
.ansi_color_fg_magenta {  color: magenta; }
.ansi_color_fg_cyan    { color: cyan; }
.ansi_color_fg_white   { color: white; }
.ansi_color_bg_black   { background-color: black; }
.ansi_color_bg_red     { background-color: red; }
.ansi_color_bg_green   { background-color: green; }
.ansi_color_bg_yellow  { background-color: yellow; }
.ansi_color_bg_blue    { background-color: blue; }
.ansi_color_bg_magenta { background-color: magenta; }
.ansi_color_bg_cyan    { background-color: cyan; }
.ansi_color_bg_white   { background-color: white; }
', 200, array('Content-Type' => 'text/css')); });$app->get('/images/failed.png', function() { return new Response(base64_decode('iVBORw0KGgoAAAANSUhEUgAAAwYAAAABCAIAAADrSS6mAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAgVJREFUeNp0VolxwzAMIzRPV+j+ncqsxBdUHOfOifURBEA6+Pv5FRUAur9EIFDV87U/du3xGjzzuSxm1TaL5OIztNZ69LG1WDn32HQ95sjZfrYAj+iSuJ9ZHzxb4L/l49rRD3LHtmNfSGxFppYrAvNI0H+cNOnsoAVOwBlahtnv9mg4bftBHhTF+DjIjgdhdoSgROIh6dQEUCvr3hewjKgacJZ8xCiVWGAriYdMNvmPQMRMgHZETamZIbGjssPI+gnwaafI/jD5KWNgShNeDlSO0hqFJFudckuwQTIVwwaBaYe2LEKuANLDBODE2hNMpmS4eYGN51m/SCzlxFwZLAexSPOtcFeovLBIykFeC6JNcSt4qeyrKV/O1HEucHVAegpVVjIY1mLyi76ax2Q4IiQY9tDZBJQ9mBqVUY2uqyIcZNOuJEzBuOqry5v6Wpo2DOxNpv0Z+nrC9chqc9ZpqtorqfOU3m1ZzG+/YaipKRXpO6tmAtDmmXFSVbJVwP1KR12QbdoqsfsSojNadwii8f3dQc2cEbJA1yFlg+pF1Z2+2fJSNkK8Ifl8yzAPXafdHokf6slxPrWaq+HP/hF1+upwDJayayXJWZ7JR62UbkUkbpmn3aszxH2ffeOqcbnclUBm+uw2UGNHVcd8g1dE6ffOZz2OV4wI3v4rUEWM8i9sWVz/AgwAVqr1ag5GyKIAAAAASUVORK5CYII='), 200, array('Content-Type' => 'image/png')); });$app->get('/images/header.png', function() { return new Response(base64_decode(''), 200, array('Content-Type' => 'image/png')); });$app->get('/images/hr.png', function() { return new Response(base64_decode('iVBORw0KGgoAAAANSUhEUgAAAzwAAAACCAIAAAASDE75AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAARNJREFUeNrsWFsSwiAMJB3v4lH89v536VrIg5e11LYfOlmmkIZNgNQxGW73xzOcAZomFbG8pV5m9vnJ9MKQismaICoyc5KBjEA2MlMkSlKa5SbUpZ+o5cQDshBnZYUoiDtWWhwsGo2+DpTutjo+lYTeZDN6TMY8j1s5HA6H488BoNfNGLTtXLCM2ErH9gIEa0hPnoEMrEx+eCeqEXJSmibmNTHX2UTTrnAb1EGzSbPNO2FC/QRYBZMlLW+KeKwE660OwCmf8Yq8TtrTgYrtq4UP2dN5Z2/3M1g/aSF4qGLjn7WVbv5P5XA4HA65X7D7CGyUHn1urukD6VauQ4IsXFusFDEIu4obavMuPqZ0+v3P+BJgAMcOofYE4u86AAAAAElFTkSuQmCC'), 200, array('Content-Type' => 'image/png')); });$app->get('/images/nobuild.png', function() { return new Response(base64_decode('iVBORw0KGgoAAAANSUhEUgAAAwYAAAABCAIAAADrSS6mAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAchJREFUeNqUVFuSJCEIBO69fxN7bFl5iqI1sVUR1bZikqQp+OfnLyIBMAAyD5g/iDnuzwyuSzOYmXWLPHN8LOVfkiwweKBEow0kAH11DIVFeW2eJBffODiy7AoyNkk4kTkyFm76deZSa2RE2yr1SmljIFlSDQoQQ0QX5yiTGMYMFxCQVybJVUqGWb4sBkm8CVXLnAETmjRwQpv4cQSGMzJWgg126SOJ/EtSXUCryGDBevrKP4KHh0SwrBKadI5MM4WM52Cl0GJj4zog/YqkoR5YesPM2vfqirXYZTdwtY/v0jqAB9ukKZDy2gCLabVYcFgFQSO6BeOL0jIzaV1AoaFT5V3/tVSc4zOkTNRvVQSKq5TPwxvkIhjgvjdt/8EKC5bZCcJgAGURljE2MgiPm460+/m4Mttf3O5yHEXyx1rIkWhdIoRHp0Jd5+3Qq5h59kq6i1abSW0pBXwrv/oZrzZ4+KTMH331qz905KOyo1+1WzBSuw5yEMbmxmvwh2OzCfdy8o5c3dIkuljrSH14plO6Ev6Vf93V5epMrmyPjB835dh1LeHVfPrkta6XqteO0ZvS97m/YF/kX0f/v2brOn8gHPrMwT8BBgDMkjfuxvEtbAAAAABJRU5ErkJggg=='), 200, array('Content-Type' => 'image/png')); });$app->get('/images/success.png', function() { return new Response(base64_decode('iVBORw0KGgoAAAANSUhEUgAAAwYAAAABCAIAAADrSS6mAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAjdJREFUeNpkVQF2JSEIAy+4R+kpey2pCglhtu91/oyCQBLQf37/bQs3i7Dl/t49LJb5Pkvn42xZ/t+/Y5Nf5+cYvzdf5/0a3y1Pu2fh8MvFiPB0zxPP+/PysqmT7ZntE8sqQK4EnukIvwwRzPC43eRzcVdsh3XsyBrOiy8vpwimcMvPzxfsPuwt5OZ7XUyjkGBsq3PKIV6VN4qzdqDz3AqB81yLgL+s9n2cDBO9AFA3fy9kz+bGeeuSALiMcWs3XRPhjPISCGNdYAeVVIaJAxG+CtnhkEJBB95JVp5OQl2qzjQAaClnKTLEnpyKwJYD6/2quI6en5dN8GW7ZFBUFpksUEgA17noV3QlCUVjJXS5vgbCt5wNMV9KqKuztdA+4ADtEKJ8UhOdDGQgu4nOoiXbzVX9qChr7tAObXwTQA7KUQWNJqt0Mql0nNNiMZLoQwnsF9aFmZCauPR0/zRNLStjszwQuFelwcbRzdk7oLWroKhccs2TqcY7BruEkjJFq5r5jAsUJsh0rYV75nCjBWeg2KhiG9EgAoK0NiAEOfSMrkfJPZqLGml8OuqY1VFOMuLlv3wMPvaLDEbXwwsWV+VPd+sSVCp9oKmEwYjp1dBzo5tLND36WkYN25MHfkYo7yBq+9O2oopGyVS3nIffA1VCNsbCOOV/nYihzdpN5wEwnzcUrT76mTHnDOe1pdSMG9OGYhvSUX4QJWsDG3CJZihA1/vF6D97rCnWAa4Kt3Hl6fBP/z8BBgBV6/vMFgEx6QAAAABJRU5ErkJggg=='), 200, array('Content-Type' => 'image/png')); });$app->get('/images/sensio-labs-product.png', function() { return new Response(base64_decode('iVBORw0KGgoAAAANSUhEUgAAALMAAAAsCAYAAAAuJIllAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAClRJREFUeNrsnAt8lWUdx5+zO2PABggDxxwmAoaFXBSSAG0ywMBAIJVEs4spWWimZogGJqiZZmqGUpp8AlIp0EBI0MZNzEC5pKIwQBOoITKGY5ez1/9/5/tuz047G5vb3KHnx+f3Oee8l+d9Lr/nf3medwSmL7/YBAIBY8OTfwFT/ZgJv8Izpqy81HRK6WauH/qQiXbsK8gzD6y5ziTEJplQdwTquMM7jmuqX+dVfDeVfetJJ2rf66fi49IjZsTpk01Ozyn1rv+7+a+bua/capLiW9d4fmbO0+YExSDhJcIVccbBoeVDdZqlczbs+AThQOF9wvdiXD85RAmuEZ5t/f6O8AzhLBVyheJnjXzGdZNDS0eZcJnwF8KxwiHCk4V32Bc5y+wQLVgt3MmnWuh7wi9wYnaIFnhY5mRhgebLTswO0Yy3hH8UthdOcWJ2iGYEhZuE/xB2El7kxOwQbbAX9P8jTBX+Rnie8BtOzA7NgbYIrqH7GSnCSZTjY58wUVgivEnYVXizsK8Ts0NToljYS/i1Bt5/qbCVsNA6Voa4kxC0rmq8KhzZaDuAM1ZMOCF63627N7qYHxM+KHxJeLCe9/cQziZW9pHOb1vgWnaus8wOTQ21pH8jXKgvdGdvuPVbY2V9D2OdMbzoYiWHTswOzQEV32nCDmHH1crGWr+HhMXXvxWOEE4jVLmNlYxXanqIE/MJgriY+JZcPV2B2CXsH3ZcrfUY63e28OfCdmgzQ1gq3EwZM4UR40D31lz0IYnESHfCnhAeVY97oPA9Ewi0WNuUJdwivEC40jquW9M/NqH3LjSZmyt8HEtchJifwhrXPaGdNqIOZwnnmdDaq8aUS8u9crNyx1MmPjbBv2aY8KvCRcLXPsO6ahgxVfgBk/AyhOuHCTv4/LXwLmFnxP6ACb1IpMtw5cftnZw2og6a+BwzobXWo1VhRoIprjBm5ityybPqqj2vclks2IT1aU/4oH8VoO9MbMCq6pLaD4RrhKsQcwJW9xLLy+hk0xeILqdtj3Hu3/UOtSIcz2Hmv/D/pJKgF2xpVVKBXIN4/T/n2S7cTVz5ZjWVe2agjNp8Gbp2nvFKEFFdjWpjQlvDGrakCddiDTOw8O2ZNGstS+pjgHAiddIX5/WvPs4nLBjDfcu5Vutzt3CB8EYTemkoFkEvg58ub7C+q1nvJzyT2EYr9yJLKw1BT+F4yt1EZ+ymUTF0VDcrmw3gfv7FDBYLY/bwW3GqsLfwr9Yz1C3p/vwXuHYl9fYtVl/K3Wzdk0aGPISk4nn/fLukimRbB3Wk8GXhh7W0T/voUA1ufDCZexzt1LXV9TzLT7oHEgbo4v/fhRsjuNRRwnv5ruKaLjyC9TuJe/wyB4XE4m0SUT8TCARyRdC7qro2IjoK5xN/JxPf/kHYxYR273QS6U6cbhsfMKFt5HKeqTtw79N/qpO3sLydKKNfDc/T/p5Af+jzDjdaEsznGMTzBgL2O9XusPqgL1b9bUT2fRNa/FYBvcNzNUbqTpar4tV0vBjxauf9ik8dpL2I5zYG1R+EJVyzCQHqYOtfIPyJa65iskzlt4psMRNsFfX8GeXeNSTrIo9yFwrPrUXMn8Pi5As/b6pvBtxCX25GRVnUfyzXX06iswJh/lK4XziUiW6Olhw2rRPU8Fb0n/aXbh7cTP/cjpizTNVaa2vPK08PeiVXmPK4XTGB6g63NHistrEahgdYiLDutfr0bcZqLRPyRgT6GtdofR+m7smI+SfCLwpzaXM67TPc0xPB98a7LGpMMftC1iWR/zL4Y6lcSQPLPQ9RnM8M7ECj3rWscCmZqsZIHzOwRVZc+JEwE4sxkmvsUTkHCzfZhBbl1V12DXO9pdbE1GfeSZv74yXUxV0pvF8ncdAr28izi+pIPGZhTbswUWZa5/S+l+hPP2G7BWuVb3mc62hTZ+LLyr7OO7Td9On8Jf26VfhlE9oSzsGax9Mvw5gkcyUBPGoCgcXpbbqbkmCR2V+wpyIZTIxLFiEXV3zWMv5fN6HXKn0L+Q5ecAvhw+mIV9u1TXgKv89iUmvhv7fK/JE1zosxMAt51mju3QMbd3kSa3knHW2IsfLpxEjbj70QaSTLtZqGv0FSUEwIkU8HebglTRC+hev6aVgZMYjge7i69ab6rs8GLPN83L3BGj4i/EuEtmYSq+3mmE6OR8myB0vQufE4+qwfk30A1mUeE24v54sJfQZT3zSSGX/79Wks2XYEfAgrvQ+XbZZum+uL2eDaDxCO3Cr8s6l61yEbMZePPeNq0yd9sCk4dtCs2/2cKRTrvi5viWnX6iTz7bNnRmrLVCae7eq3oYkt1CfNMgYaFr4atiZ8NeOjdfwmRsVffltPu0YR+j1k9ZNpCjEXWUI2VsUTsWD/jBD0z66l3DzhOMpPwPIsw0VOonw9dx9C2F9DGYmEIBMJfYZbltsX4jTWKZMQji7pzCCuLg0rr4x7VEi/s473wPXtNFX/5UIgQiynx+/ALS+gbWlYox9aGbqeu5bfXYi/s3nuGjxXAn2gIc9SrLBOajO695Xhz00hvJrIJM9DNHpsTkJs4kIRsorkw7YS94/qFbr/nG45JiUx1bRPTq9pjMZjVXVyXRg2djpZ+lBnX3yp6EEt6w0cfx4LOx6PvoVxLg0r75HmyJbjGJgUy3KMZoBmsIQyEDceZBB6si74US3lPkx8+gRWqSONtWdlPMnmKEv0rxOL+pOpLYP8XSzSB9b912JZHiW2a4Ur32tZ8HgrwfSIVedT/ioEcQMWaLUl2BjruEcW/ywh2QXEhSW43lPICRZhiWLpo6usJDWFesWTS+xDwAcRTdBKEM1pHfvayeo0EtZB1HkcnkG94xxCtc2EBy8Qg1d4nsy0XpHGZxJG6XYmU4J1zq/bOPrbX2VQQ7IOoW+wjm+FMfVZE24qMW9gcJ5EuAMIOw4ikmwYQ+NmH0cGqsndFcSFbRj4eVYcGcRtDifm9YUXQMwliOt9zi2hrHOtZyxAOOOIx2Moc7q1ArPVVN/795OcabSjkGTxfsNOGoO2BCs0gEm1nNDlTCbynLD2dkCU6xlwDTMu5dkHEHYug309k/Mma21Wvz9XaYYTUv2vF2JUDPdfTG7RnZBJXfcUYt4xeJkd1jJeODIIBQrxMEX0W7gXWwtNmCd8spYx/0yFXGGF+N90RjBwO3E75TW4V2P+902lStTyCmigtvtaEoaeOt5k97isWfu/jr7pQ4J8lNzCT5peRND98ZDqwR7n2FQrrrXhe5Bce+JY4cuDTby50iyW2RCwr6xj1+nT7Fg5NKxvtrGSU2atnWcSwmWytPgy1n0yXjBSUl7AMmRh2PEjWOZUU//3jVukmB1aLg7XYGEzsOonhy1D1rbJcyjC8SOEdZ2cmB2aG2+SDHc1jfMSUTkTo0O0d4wTc/Qhnxi3MVFAohvVcC/nOxgSywwnZocTJXTRWDzeidkh2uFvqUf1ypO/zuzgEPVwltnBidnBwYnZwcGJ2cHBidnBidnBwYnZwcGJ2cHBidnBQfCJAAMArLzCAgR2MUIAAAAASUVORK5CYII='), 200, array('Content-Type' => 'image/png')); });} namespace { if ('cli' === php_sapi_name()) { $console->run(); } else { $app->run(); } } 